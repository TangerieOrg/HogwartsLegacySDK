#pragma once
#include <cstdint>
#include "EBossStates.hpp"
#include "EFlammableEnum.hpp"
#include "EImpactTypes.hpp"
#include "EMarkupType.hpp"
#include "ENoiseSize.hpp"
#include "EObjectSizeClass.hpp"
#include "EUIHealthBarType.hpp"
#include "EWidgetType.hpp"
#include "FGameplayTagContainer.hpp"
#include "FSavedMaterialsForMesh.hpp"
#include "FVector.hpp"
#include "UObject.hpp"
class UActorComponent;
class UAkComponent;
class UMaterialPropertyData;
class AActor;
class UObjectStateDataContainerBase;
class UOdcObstacleComponent;
class URepairInfo;
class UGeometryCollection;
class UStaticMesh;
class UClass;
struct FMunitionImpactData;
struct FHitResult;
class UAkAudioEvent;
class UVelocityTrackerComponent;
class UObjectStateInfoData;
class UPrimitiveComponent;
class UPhoenixPhysicalMaterial;
class UParticleSystem;
#pragma pack(push, 1)
class UObjectStateInfo : public UObject {
public:
    char pad_28[0x88];
    EWidgetType WidgetType; // 0xb0
    char pad_b1[0x7f];
    UMaterialPropertyData* MaterialPropertyData; // 0x130
    AActor* Actor; // 0x138
    TArray<FSavedMaterialsForMesh> SavedMaterialForMeshArray; // 0x140
    UObjectStateDataContainerBase* ObjectStateData; // 0x150
    char pad_158[0x18];
    TArray<UActorComponent*> DynamicNavigationComponents; // 0x170
    UOdcObstacleComponent* OdcObstacleComponent; // 0x180
    URepairInfo* RepairInfo; // 0x188
    UOdcObstacleComponent* DynamicNavigationAreaObstacleComponent; // 0x190
    char pad_198[0x48];
    static UObjectStateInfo* StaticClass();
    bool WillRevealThruWalls();
    bool WillNearDeathKneel();
    bool WasOnFireWhenKilled();
    void UpdateUsability();
    void UpdateActivation();
    bool Unlock(float Value);
    bool TreatAsCharacterForDamage();
    bool Thaw();
    bool TakeDamageFromCharacterCollisions();
    bool ShouldCreateCrimescene(AActor* Instigator);
    void SetupSfx(UAkComponent* AkComponent);
    void SetUnusable(float RestoreUsabilityTime);
    void SetTransformable(bool bTransform);
    void SetTargetable(bool bTargetable);
    void SetSpecialTargetPerceptionActive(bool bActive);
    void SetSizeClass(EObjectSizeClass NewSizeClass);
    void SetShowTargetUI(bool ShowUI);
    void SetSendTargetPriority(uint8_t Priority);
    void SetRepairInPlace(bool bInPlace);
    void SetRepairable(bool Repairable);
    void SetProtectedFromDamageAndSpells(bool bInProtected, UObject* InInstigator);
    void SetPersistence(bool InPersistence);
    void SetPercentCharred(float PercentCharred);
    void SetMinOptimumAvatarDistance(float Distance);
    void SetMinDamageThreshold(float Threshold);
    void SetMaxOptimumAvatarDistance(float Distance);
    void SetMaterialSwapped(bool bInMaterialSwapped);
    void SetMarkupValue(EMarkupType MarkupType, float InValue);
    bool SetLocked();
    void SetJuggernaut(bool bInJuggernaut);
    void SetIsABoss(bool bInIsABoss);
    void SetInWaterVolume(bool inWater);
    void SetInWater(bool inWater, AActor* Instigator);
    void SetInvulnerableToDamage(bool Invulnerable);
    bool SetInvulnerable(float InInvulnerableTime);
    void SetImpulseIgnoreTime(float Time);
    void SetImmuneToSpells(bool bImmune);
    void SetImmuneToEverythingExcept(FGameplayTagContainer& InImpactTagContainer);
    void SetHighlightWhenBroken(bool bHighlightWhenBroken);
    void SetHidden(bool bHidden);
    void SetHealthBarType(EUIHealthBarType InType);
    bool SetHealth(float Amount, bool bIndicateHUD);
    void SetFragile(bool Fragile);
    void SetForceNotBroken(bool bNotBroken);
    void SetForceBroken(bool bBroken);
    void SetFlammable(EFlammableEnum InFlammable);
    void SetExplode(bool bInExplode);
    void SetEquipped(bool bInEquipped);
    void SetDieInWater(bool DieInWater);
    void SetDestructibleMeshByName(FString DestuctibleMeshName);
    void SetDestructibleGeometryCollection(UGeometryCollection* DestructibleGeometryCollection);
    void SetDestroyedBaseByName(FString BaseName);
    void SetDestroyedBase(UStaticMesh* Base);
    void SetDazed(bool bInDazed);
    void SetDamagable(bool Damagable);
    void SetCurrentlyTargeted(bool CurrentlyTargeted);
    void SetCanHighlight(bool bCanHighlight);
    void SetCanBecomeMovable(bool bCanBecomeMovable);
    void SetBlocking(bool bInBlocking);
    void SetBaseHealth(float Health);
    void RestoreUsability(bool repeat);
    void RestoreMaterial();
    void Reset(bool bOriginalLocation);
    bool RepairChildren();
    void Repair(AActor* RepairInstigator, int32_t Item, bool Aoe, bool InOriginalLocation, bool InAutoComplete);
    void RemoveMagicEffects(TArray<UClass*>& EffectTypeList);
    void RemoveMagic();
    void RemoveImmunity(FGameplayTagContainer& InImpactTagContainer);
    void RemoveImmuneUnlessCritical(FGameplayTagContainer& InImpactTagContainer);
    void RemoveDeathFx();
    void RemoveAllStateEffects();
    void RemoveAllImmunity();
    void RemoveAllImmuneUnlessCritical();
    static void RemoveActorMagicEffects(AActor* InActor, TArray<UClass*>& EffectTypeList);
    void OnRepair__DelegateSignature(AActor* RepairedActor);
    void OnRemoved__DelegateSignature(AActor* DestroyedActor);
    void OnMunitionImpactDamage(UObject* i_caller, FMunitionImpactData& miData);
    void OnHealthChanged__DelegateSignature(AActor* Target, float InHealthChange, bool bIndicateHUD);
    void OnEspiskeyHealing__DelegateSignature(AActor* Instigator, float InHealthChange, AActor* Target);
    void OnDestruct__DelegateSignature(AActor* DestroyedActor);
    void OnCurtainRaised();
    void OnActorHit(AActor* SelfActor, AActor* OtherActor, FVector NormalImpulse, FHitResult& Hit);
    void OnActorDamaged__DelegateSignature(AActor* Target, AActor* Instigator, float Damage, FHitResult& Hit);
    void NotifyCriticalHit();
    bool IsWaterproof();
    bool IsUsableWhenRepaired();
    bool IsUsable();
    bool IsUnusable();
    bool IsTransformable();
    bool IsTargetableWhenBroken();
    bool IsTargetable();
    bool IsSpecialTargetPerceptionActive();
    bool IsSimulatingPhysics();
    bool IsRevelioResource();
    bool IsResurrecting();
    bool IsRepairInPlace();
    bool IsRepairing();
    bool IsRepairable();
    bool IsProtectedFromDeath();
    bool IsProtectedFromDamageAndSpells();
    bool IsProtectedCompanion();
    bool IsPointOnFire(FVector& Point, bool LimitToRing);
    bool IsPetrified();
    bool IsPartiallyBroken();
    bool IsOnFire();
    bool IsObstacleDisabled();
    bool IsObjectTypeWater();
    bool IsObjectTypePlant();
    bool IsObjectTypeInanimate();
    bool IsObjectTypeAnimate();
    bool IsNoDamageBreakable();
    bool IsNearDeathKneeling();
    bool IsMovable();
    bool IsMounted();
    bool IsMaterialSwapped();
    bool IsLocked();
    bool IsLevitating();
    bool IsInWaterVolume();
    bool IsInWater();
    bool IsInvulnerableToDamage();
    bool IsInvulnerable();
    bool IsInteractive();
    bool IsInNeedOfRepair();
    bool IsImperiousControlled();
    bool IsImmuneToSpells();
    bool IsImmuneToFireDamage();
    bool IsHidden();
    bool IsHealthZero();
    bool IsHealthCritical(bool bIgnorePendingDamage);
    bool IsFrozen();
    bool IsFreezable();
    bool IsFragile();
    bool IsFlammable();
    bool IsFightClubOpponent();
    static bool IsFallDamageDisabled();
    bool IsEquipped();
    bool IsDisillusioned();
    bool IsDead();
    bool IsDazed();
    bool IsDamagableWhenFrozen();
    bool IsDamagableWhenCharred();
    bool IsDamagableInPieces();
    bool IsDamagable();
    bool IsCuttable();
    bool IsCursed();
    bool IsCrucioed();
    bool IsCommonBreakable();
    bool IsCombatCursed();
    bool IsCharred();
    static bool IsCharacterOnGroundWithHitResult(AActor* InActor, FHitResult& OutHitResult);
    static bool IsCharacterOnGround(AActor* InActor);
    bool IsBurning();
    bool IsBrokenOrPartiallyBroken();
    bool IsBroken();
    bool IsBlocking();
    bool IsBeingAffectedBySpells();
    bool IsAWolf();
    bool IsAWizard();
    bool IsAwake();
    bool IsATroll();
    bool IsATransformedCharacter();
    bool IsAStudent();
    bool IsAStation();
    bool IsASpider();
    bool IsArrestoMomentumed();
    bool IsARagdoll();
    bool IsAProtectedCharacterWhichCannotDie();
    bool IsAProfessor();
    bool IsAPortraitCharacter();
    bool IsAPlayer();
    bool IsAPlant();
    bool IsAnOppugnoTarget();
    bool IsAnInferi();
    bool IsAnEnvironment();
    bool IsAnEnemy();
    bool IsANamedCharacter();
    bool IsAMount();
    bool IsAMagicalCreatureWhichCannotDie();
    bool IsAlly(AActor* ActorPtr);
    bool IsALeader();
    bool IsAJuggernaut();
    bool IsAHouseElf();
    bool IsAHobo();
    bool IsAGoblin();
    bool IsAGhost();
    bool IsADugbog();
    bool IsADragon();
    bool IsADarkWizard();
    static bool IsActorSimulatingPhysics(AActor* InActor);
    static bool IsActorLeviosoActive(AActor* InActor);
    bool IsACreature();
    bool IsACompanion();
    bool IsACharacter();
    bool IsACentaur();
    bool IsABossCharacter();
    bool IsABiped();
    void InWaterChangedDelegate__DelegateSignature(UObjectStateInfo* ObjectStateInfo, bool bOldInWater);
    bool IgnoreMunitionImpactEvents();
    bool IgnoreLimitedCountRules();
    bool IgnoreActorHitEvents();
    bool HasStateEffect();
    bool HasOnFireDoT();
    bool HasBecomeMovable();
    bool HasAffectingSpells();
    float GetWetness();
    UVelocityTrackerComponent* GetVelocityTracker();
    float GetUIHealthPercent();
    FName GetType();
    static float GetTodaysPlayerGainedSoCapCount();
    static float GetStudentsInInfirmary();
    bool GetStartAsleep();
    float GetSizeClassOnFireDestroyedDamage();
    UClass* GetSizeClassOnFireDestroyedAOE();
    float GetSizeClassFireDamageMultiplier();
    EObjectSizeClass GetSizeClass();
    bool GetShowTargetUI();
    uint8_t GetSendTargetPriority();
    float GetRawCurrentHealth();
    bool GetRagdollInfo(FVector& Location, FVector& Velocity);
    FName GetRagdollBoneName();
    static float GetPlayerPottedPlants();
    static float GetPlayerFriendsCount();
    static float GetPlayerEnemiesCount();
    static float GetPlayerConsecutiveEnemyHits();
    static float GetPlayerCompletedFactSheets();
    bool GetPersistence();
    float GetPercentCharred();
    static UObjectStateInfoData* GetObjectStateInfoData();
    ENoiseSize GetObjectNoiseSize();
    static float GetNormalHarvestCount();
    static void GetNonScaledActorBounds(AActor* InActor, bool bOnlyCollidingComponents, FVector& Origin, FVector& BoxExtent);
    bool GetNeverAffectNavmesh();
    bool GetNavOverrideMobilityCheck();
    float GetMinOptimumAvatarDistance();
    float GetMinDamageThreshold();
    float GetMaxOptimumAvatarDistance();
    float GetMaxHealth();
    UMaterialPropertyData* GetMaterialPropertyData();
    float GetMass();
    bool GetMarkupValue(EMarkupType MarkupType, float& OutValue);
    float GetLockValue();
    float GetLevel();
    bool GetLastDamageInReactionAdjustment();
    bool GetKilledWithAvadaKedavra();
    EImpactTypes GetImpactType();
    UAkAudioEvent* GetHitSfx();
    float GetHealthPercentage();
    EUIHealthBarType GetHealthBarType();
    float GetHealth();
    float GetFrozenDamageMultiplier();
    float GetFireDamagePerSecond();
    float GetFireDamageFloor();
    UAkAudioEvent* GetFastSfx();
    bool GetDisplayDamage();
    UStaticMesh* GetDestroyedBase();
    FName GetDbVoiceId();
    FName GetDbTypeId();
    FName GetDbSubtypeID();
    FName GetDbPersistentId();
    FName GetDbLookId();
    FName GetDbId();
    FName GetDbGenderId();
    FName GetDbEmoteVoiceId();
    FName GetDbClassId();
    static float GetCursedEnemyCount();
    bool GetCurrentlyTargeted();
    static float GetCurrentItemEffectiveness();
    static UPhoenixPhysicalMaterial* GetComponentPhoenixPhysicalMaterial(UPrimitiveComponent* InPrimComponent);
    float GetCompanionLevel();
    float GetCharredDamageMultiplier();
    FVector GetBrokenPieceLocation();
    EBossStates GetBossState();
    float GetBaseHealth();
    static float GetActorMass(AActor* InActor);
    static UPrimitiveComponent* GetActorMainPrimitiveComponent(AActor* InActor);
    static EImpactTypes GetActorImpactType(AActor* InActor);
    AActor* GetActor();
    void ForceBreak(float InScale, bool InRestoreBroken);
    void ForceAsleep();
    void ExtendNearDeathKneel(float KneelTime);
    void EndAffectingSpells__DelegateSignature();
    bool EndAffectingSpells();
    AActor* DropLootContainer(FVector InLocation);
    AActor* DropCooldownPickup(FVector InLocation);
    bool DoHealing(float Amount, AActor* InInstigator, UPrimitiveComponent* PrimComp, int32_t Item, bool bAoe, bool InOriginalLocation, bool InAutoComplete);
    bool DoFireDamage(float Amount, AActor* Instigator);
    bool DoesExplode();
    void DisableObjectState(bool bInDisabled);
    static void DisableFallDamage(bool bDisable);
    static void DisableDamageMods(bool bDisable);
    bool DiesInWater();
    void DelayedRestoreUsability(float Delay);
    void DelayedRestoreBroken(float InTime);
    void DelayedForceBreak(float InTime);
    void DelayDropLootContainer();
    bool DecreaseWetness(float Amount);
    bool DecreaseFire(float Amount);
    void Deactivate();
    void DamageInPieces(float InImpulseStr, float InDamage, FVector& InHitLocation, FVector& InHitDirection, float InRadius);
    void CreateNoise(ENoiseSize NoiseSize, FVector& NoiseLocation, AActor* NoiseInstigator, FGameplayTagContainer EventContainer);
    void ClearInvulnerable();
    void ClearImmuneToEverythingExcept();
    void ClearCurrentVelocity();
    static void ClearCooldownPickupTargets();
    void CheckObstacleSetup();
    bool CanHighlightWhenBroken();
    bool CanHighlight();
    bool CanBeRepaired();
    bool CanBecomeMovable();
    void BreakStaticDestructibleMesh(float InImpulseStr, FVector& InHitLocation, FVector& InHitDirection, UParticleSystem* InDestroyEffects, float InEffectRadius, float InRadius, float AdditionalDestructionForce, float AngularForceMultiplier);
    void BecomeMovable(bool bBecomeMovable);
    bool AdjustHealth(float change, bool bIndicateHUD);
    void AddImmunity(FGameplayTagContainer& InImpactTagContainer);
    void AddImmuneUnlessCritical(FGameplayTagContainer& InImpactTagContainer);
    static void AddCooldownPickupTarget(FVector& InTarget);
    static void ActorStopSimulatingPhysics(AActor* InActor);
    static void ActorStartSimulatingPhysics(AActor* InActor);
    void ActorHitShake(float Damage, FVector& ImpactLocation);
    void Activate();
}; // Size: 0x1e0
#pragma pack(pop)
