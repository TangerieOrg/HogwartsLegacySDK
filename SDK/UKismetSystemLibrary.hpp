#pragma once
#include <cstdint>
#include "EDrawDebugTrace\Type.hpp"
#include "EMoveComponentAction\Type.hpp"
#include "EObjectTypeQuery.hpp"
#include "EQuitPreference\Type.hpp"
#include "ETraceTypeQuery.hpp"
#include "FDebugFloatHistory.hpp"
#include "FHitResult.hpp"
#include "FIntPoint.hpp"
#include "FLatentActionInfo.hpp"
#include "FLinearColor.hpp"
#include "FPrimaryAssetId.hpp"
#include "FPrimaryAssetType.hpp"
#include "FRotator.hpp"
#include "FSoftClassPath.hpp"
#include "FSoftObjectPath.hpp"
#include "FTimerHandle.hpp"
#include "FVector.hpp"
#include "FVector2D.hpp"
#include "UBlueprintFunctionLibrary.hpp"
class UObject;
struct FUserActivity;
class AActor;
class USceneComponent;
class UClass;
class UPrimitiveComponent;
class APlayerController;
struct FTransform;
struct FGenericStruct;
struct FColor;
struct FCollisionProfileName;
class UTexture2D;
struct FPlane;
class ACameraActor;
class UWorld;
#pragma pack(push, 1)
class UKismetSystemLibrary : public UBlueprintFunctionLibrary {
public:
    static UKismetSystemLibrary* StaticClass();
    static void UnregisterForRemoteNotifications();
    static void UnloadPrimaryAssetList(TArray<FPrimaryAssetId>& PrimaryAssetIdList);
    static void UnloadPrimaryAsset(FPrimaryAssetId PrimaryAssetId);
    static void TransactObject(UObject* Object);
    static void StackTrace();
    static bool SphereTraceSingleForObjects(UObject* WorldContextObject, FVector Start, FVector End, float Radius, TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime);
    static bool SphereTraceSingleByProfile(UObject* WorldContextObject, FVector Start, FVector End, float Radius, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime);
    static bool SphereTraceSingle(UObject* WorldContextObject, FVector Start, FVector End, float Radius, ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime);
    static bool SphereTraceMultiForObjects(UObject* WorldContextObject, FVector Start, FVector End, float Radius, TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime);
    static bool SphereTraceMultiByProfile(UObject* WorldContextObject, FVector Start, FVector End, float Radius, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime);
    static bool SphereTraceMulti(UObject* WorldContextObject, FVector Start, FVector End, float Radius, ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime);
    static bool SphereOverlapComponents(UObject* WorldContextObject, FVector SpherePos, float SphereRadius, TArray<EObjectTypeQuery>& ObjectTypes, UClass* ComponentClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<UPrimitiveComponent*>& OutComponents);
    static bool SphereOverlapActors(UObject* WorldContextObject, FVector SpherePos, float SphereRadius, TArray<EObjectTypeQuery>& ObjectTypes, UClass* ActorClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<AActor*>& OutActors);
    static void SnapshotObject(UObject* Object);
    static void ShowPlatformSpecificLeaderboardScreen(FString CategoryName);
    static void ShowPlatformSpecificAchievementsScreen(APlayerController* SpecificPlayer);
    static void ShowInterstitialAd();
    static void ShowAdBanner(int32_t AdIdIndex, bool bShowOnBottomOfScreen);
    static void SetWindowTitle();
    static void SetVolumeButtonsHandledBySystem(bool bEnabled);
    static void SetVectorPropertyByName(UObject* Object, FName PropertyName, FVector& Value);
    static void SetUserActivity(FUserActivity& UserActivity);
    static void SetTransformPropertyByName(UObject* Object, FName PropertyName, FTransform& Value);
    static void SetTextPropertyByName(UObject* Object, FName PropertyName);
    static void SetSuppressViewportTransitionMessage(UObject* WorldContextObject, bool bState);
    static void SetStructurePropertyByName(UObject* Object, FName PropertyName, FGenericStruct& Value);
    static void SetStringPropertyByName(UObject* Object, FName PropertyName, FString Value);
    static void SetSoftObjectPropertyByName(UObject* Object, FName PropertyName);
    static void SetSoftClassPropertyByName(UObject* Object, FName PropertyName);
    static void SetRotatorPropertyByName(UObject* Object, FName PropertyName, FRotator& Value);
    static void SetObjectPropertyByName(UObject* Object, FName PropertyName, UObject* Value);
    static void SetNamePropertyByName(UObject* Object, FName PropertyName, FName& Value);
    static void SetLinearColorPropertyByName(UObject* Object, FName PropertyName, FLinearColor& Value);
    static void SetIntPropertyByName(UObject* Object, FName PropertyName, int32_t Value);
    static void SetInterfacePropertyByName(UObject* Object, FName PropertyName);
    static void SetInt64PropertyByName(UObject* Object, FName PropertyName, int64_t Value);
    static void SetGamepadsBlockDeviceFeedback(bool bBlock);
    static void SetFloatPropertyByName(UObject* Object, FName PropertyName, float Value);
    static void SetFieldPathPropertyByName(UObject* Object, FName PropertyName);
    static void SetColorPropertyByName(UObject* Object, FName PropertyName, FColor& Value);
    static void SetCollisionProfileNameProperty(UObject* Object, FName PropertyName, FCollisionProfileName& Value);
    static void SetClassPropertyByName(UObject* Object, FName PropertyName, UClass* Value);
    static void SetBytePropertyByName(UObject* Object, FName PropertyName, uint8_t Value);
    static void SetBoolPropertyByName(UObject* Object, FName PropertyName, bool Value);
    static void RetriggerableDelay(UObject* WorldContextObject, float Duration, FLatentActionInfo LatentInfo);
    static void ResetGamepadAssignmentToController(int32_t ControllerId);
    static void ResetGamepadAssignments();
    static void RegisterForRemoteNotifications();
    static void QuitGame(UObject* WorldContextObject, APlayerController* SpecificPlayer, EQuitPreference::Type QuitPreference, bool bIgnorePlatformRestrictions);
    static void PrintWarning(FString inString);
    static void PrintText(UObject* WorldContextObject);
    static void PrintString(UObject* WorldContextObject, FString inString, bool bPrintToScreen, bool bPrintToLog, FLinearColor TextColor, float Duration);
    static bool ParseParamValue(FString inString, FString InParam, FString& OutValue);
    static bool ParseParam(FString inString, FString InParam);
    static void ParseCommandLine(FString InCmdLine, TArray<FString>& OutTokens, TArray<FString>& OutSwitches);
    void OnAssetLoaded__DelegateSignature(UObject* Loaded);
    void OnAssetClassLoaded__DelegateSignature(UClass* Loaded);
    static void NotEqual_SoftObjectReference();
    static void NotEqual_SoftClassReference();
    static bool NotEqual_PrimaryAssetType(FPrimaryAssetType A, FPrimaryAssetType B);
    static bool NotEqual_PrimaryAssetId(FPrimaryAssetId A, FPrimaryAssetId B);
    static FString NormalizeFilename(FString InFilename);
    static void MoveComponentTo(USceneComponent* Component, FVector TargetRelativeLocation, FRotator TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, EMoveComponentAction::Type MoveAction, FLatentActionInfo LatentInfo);
    static FSoftObjectPath MakeSoftObjectPath(FString PathString);
    static FSoftClassPath MakeSoftClassPath(FString PathString);
    static void MakeLiteralText();
    static FString MakeLiteralString(FString Value);
    static FName MakeLiteralName(FName Value);
    static int32_t MakeLiteralInt(int32_t Value);
    static float MakeLiteralFloat(float Value);
    static uint8_t MakeLiteralByte(uint8_t Value);
    static bool MakeLiteralBool(bool Value);
    static void LoadInterstitialAd(int32_t AdIdIndex);
    static void LoadClassAsset_Blocking();
    static void LoadAssetClass(UObject* WorldContextObject);
    static void LoadAsset_Blocking();
    static void LoadAsset(UObject* WorldContextObject);
    static bool LineTraceSingleForObjects(UObject* WorldContextObject, FVector Start, FVector End, TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime);
    static bool LineTraceSingleByProfile(UObject* WorldContextObject, FVector Start, FVector End, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime);
    static bool LineTraceSingle(UObject* WorldContextObject, FVector Start, FVector End, ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime);
    static bool LineTraceMultiForObjects(UObject* WorldContextObject, FVector Start, FVector End, TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime);
    static bool LineTraceMultiByProfile(UObject* WorldContextObject, FVector Start, FVector End, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime);
    static bool LineTraceMulti(UObject* WorldContextObject, FVector Start, FVector End, ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime);
    static void LaunchURLForPredeterminedContent(FString URL, FString domain);
    static void LaunchURL(FString URL);
    static void K2_UnPauseTimerHandle(UObject* WorldContextObject, FTimerHandle Handle);
    static void K2_UnPauseTimerDelegate();
    static void K2_UnPauseTimer(UObject* Object, FString FunctionName);
    static bool K2_TimerExistsHandle(UObject* WorldContextObject, FTimerHandle Handle);
    static void K2_TimerExistsDelegate();
    static bool K2_TimerExists(UObject* Object, FString FunctionName);
    static void K2_SetTimerDelegate();
    static FTimerHandle K2_SetTimer(UObject* Object, FString FunctionName, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance);
    static void K2_PauseTimerHandle(UObject* WorldContextObject, FTimerHandle Handle);
    static void K2_PauseTimerDelegate();
    static void K2_PauseTimer(UObject* Object, FString FunctionName);
    static bool K2_IsValidTimerHandle(FTimerHandle Handle);
    static bool K2_IsTimerPausedHandle(UObject* WorldContextObject, FTimerHandle Handle);
    static void K2_IsTimerPausedDelegate();
    static bool K2_IsTimerPaused(UObject* Object, FString FunctionName);
    static bool K2_IsTimerActiveHandle(UObject* WorldContextObject, FTimerHandle Handle);
    static void K2_IsTimerActiveDelegate();
    static bool K2_IsTimerActive(UObject* Object, FString FunctionName);
    static FTimerHandle K2_InvalidateTimerHandle(FTimerHandle& Handle);
    static float K2_GetTimerRemainingTimeHandle(UObject* WorldContextObject, FTimerHandle Handle);
    static void K2_GetTimerRemainingTimeDelegate();
    static float K2_GetTimerRemainingTime(UObject* Object, FString FunctionName);
    static float K2_GetTimerElapsedTimeHandle(UObject* WorldContextObject, FTimerHandle Handle);
    static void K2_GetTimerElapsedTimeDelegate();
    static float K2_GetTimerElapsedTime(UObject* Object, FString FunctionName);
    static void K2_ClearTimerHandle(UObject* WorldContextObject, FTimerHandle Handle);
    static void K2_ClearTimerDelegate();
    static void K2_ClearTimer(UObject* Object, FString FunctionName);
    static void K2_ClearAndInvalidateTimerHandle(UObject* WorldContextObject, FTimerHandle& Handle);
    static void IsValidSoftObjectReference();
    static void IsValidSoftClassReference();
    static bool IsValidPrimaryAssetType(FPrimaryAssetType PrimaryAssetType);
    static bool IsValidPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);
    static bool IsValidClass(UClass* Class);
    static bool IsValid(UObject* Object);
    static bool IsUnattended();
    static bool IsStandalone(UObject* WorldContextObject);
    static bool IsSplitScreen(UObject* WorldContextObject);
    static bool IsServer(UObject* WorldContextObject);
    static bool IsScreensaverEnabled();
    static bool IsPackagedForDistribution();
    static bool IsLoggedIn(APlayerController* SpecificPlayer);
    static bool IsInterstitialAdRequested();
    static bool IsInterstitialAdAvailable();
    static bool IsDedicatedServer(UObject* WorldContextObject);
    static bool IsControllerAssignedToGamepad(int32_t ControllerId);
    static void HideAdBanner();
    static bool GetWaterHeight(UObject* WorldContextObject, EDrawDebugTrace::Type DrawDebugType, FHitResult& OutHit, FVector QueryPosition, float SearchUp, float SearchDown, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime);
    static bool GetVolumeButtonsHandledBySystem();
    static FString GetUniqueDeviceId();
    static FString GetSystemPath(UObject* Object);
    static bool GetSupportedFullscreenResolutions(TArray<FIntPoint>& Resolutions);
    static void GetSoftObjectReferenceFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);
    static void GetSoftClassReferenceFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);
    static int32_t GetRenderingMaterialQualityLevel();
    static int32_t GetRenderingDetailMode();
    static FString GetProjectSavedDirectory();
    static FString GetProjectDirectory();
    static FString GetProjectContentDirectory();
    static void GetPrimaryAssetsWithBundleState(TArray<FName>& RequiredBundles, TArray<FName>& ExcludedBundles, TArray<FPrimaryAssetType>& ValidTypes, bool bForceCurrentState, TArray<FPrimaryAssetId>& OutPrimaryAssetIdList);
    static void GetPrimaryAssetIdList(FPrimaryAssetType PrimaryAssetType, TArray<FPrimaryAssetId>& OutPrimaryAssetIdList);
    static void GetPrimaryAssetIdFromSoftObjectReference();
    static void GetPrimaryAssetIdFromSoftClassReference();
    static FPrimaryAssetId GetPrimaryAssetIdFromObject(UObject* Object);
    static FPrimaryAssetId GetPrimaryAssetIdFromClass(UClass* Class);
    static TArray<FString> GetPreferredLanguages();
    static FString GetPlatformUserName();
    static FString GetPlatformUserDir();
    static FString GetPathName(UObject* Object);
    static UObject* GetOuterObject(UObject* Object);
    static FString GetObjectName(UObject* Object);
    static UObject* GetObjectFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);
    static int32_t GetMinYResolutionForUI();
    static int32_t GetMinYResolutionFor3DView();
    static FString GetLocalCurrencySymbol();
    static FString GetLocalCurrencyCode();
    static float GetGameTimeInSeconds(UObject* WorldContextObject);
    static FString GetGamepadControllerName(int32_t ControllerId);
    static UTexture2D* GetGamepadButtonGlyph(FString ButtonKey, int32_t ControllerIndex);
    static FString GetGameName();
    static FString GetGameBundleId();
    static int64_t GetFrameCount();
    static FString GetEngineVersion();
    static FString GetDisplayName(UObject* Object);
    static FString GetDeviceId();
    static FString GetDefaultLocale();
    static FString GetDefaultLanguage();
    static bool GetCurrentBundleState(FPrimaryAssetId PrimaryAssetId, bool bForceCurrentState, TArray<FName>& OutBundles);
    static bool GetConvenientWindowedResolutions(TArray<FIntPoint>& Resolutions);
    static int32_t GetConsoleVariableIntValue(FString VariableName);
    static float GetConsoleVariableFloatValue(FString VariableName);
    static bool GetConsoleVariableBoolValue(FString VariableName);
    static void GetComponentBounds(USceneComponent* Component, FVector& Origin, FVector& BoxExtent, float& SphereRadius);
    static FString GetCommandLine();
    static UClass* GetClassFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);
    static FString GetClassDisplayName(UClass* Class);
    static int32_t GetAdIDCount();
    static void GetActorListFromComponentList(TArray<UPrimitiveComponent*>& ComponentList, UClass* ActorClassFilter, TArray<AActor*>& OutActorList);
    static void GetActorBounds(AActor* Actor, FVector& Origin, FVector& BoxExtent);
    static void ForceCloseAdBanner();
    static void FlushPersistentDebugLines(UObject* WorldContextObject);
    static void FlushDebugStrings(UObject* WorldContextObject);
    static void ExecuteConsoleCommand(UObject* WorldContextObject, FString Command, APlayerController* SpecificPlayer);
    static void EqualEqual_SoftObjectReference();
    static void EqualEqual_SoftClassReference();
    static bool EqualEqual_PrimaryAssetType(FPrimaryAssetType A, FPrimaryAssetType B);
    static bool EqualEqual_PrimaryAssetId(FPrimaryAssetId A, FPrimaryAssetId B);
    static int32_t EndTransaction();
    static void DrawDebugString(UObject* WorldContextObject, FVector TextLocation, FString Text, AActor* TestBaseActor, FLinearColor TextColor, float Duration);
    static void DrawDebugSphere(UObject* WorldContextObject, FVector Center, float Radius, int32_t Segments, FLinearColor LineColor, float Duration, float Thickness);
    static void DrawDebugPoint(UObject* WorldContextObject, FVector Position, float Size, FLinearColor PointColor, float Duration);
    static void DrawDebugPlane(UObject* WorldContextObject, FPlane& PlaneCoordinates, FVector Location, float Size, FLinearColor PlaneColor, float Duration);
    static void DrawDebugLine(UObject* WorldContextObject, FVector LineStart, FVector LineEnd, FLinearColor LineColor, float Duration, float Thickness);
    static void DrawDebugFrustum(UObject* WorldContextObject, FTransform& FrustumTransform, FLinearColor FrustumColor, float Duration, float Thickness);
    static void DrawDebugFloatHistoryTransform(UObject* WorldContextObject, FDebugFloatHistory& FloatHistory, FTransform& DrawTransform, FVector2D DrawSize, FLinearColor DrawColor, float Duration);
    static void DrawDebugFloatHistoryLocation(UObject* WorldContextObject, FDebugFloatHistory& FloatHistory, FVector DrawLocation, FVector2D DrawSize, FLinearColor DrawColor, float Duration);
    static void DrawDebugCylinder(UObject* WorldContextObject, FVector Start, FVector End, float Radius, int32_t Segments, FLinearColor LineColor, float Duration, float Thickness);
    static void DrawDebugCoordinateSystem(UObject* WorldContextObject, FVector AxisLoc, FRotator AxisRot, float Scale, float Duration, float Thickness);
    static void DrawDebugConeInDegrees(UObject* WorldContextObject, FVector Origin, FVector Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, FLinearColor LineColor, float Duration, float Thickness);
    static void DrawDebugCone(UObject* WorldContextObject, FVector Origin, FVector Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, FLinearColor LineColor, float Duration, float Thickness);
    static void DrawDebugCircle(UObject* WorldContextObject, FVector Center, float Radius, int32_t NumSegments, FLinearColor LineColor, float Duration, float Thickness, FVector YAxis, FVector ZAxis, bool bDrawAxis);
    static void DrawDebugCapsule(UObject* WorldContextObject, FVector Center, float HalfHeight, float Radius, FRotator Rotation, FLinearColor LineColor, float Duration, float Thickness);
    static void DrawDebugCamera(ACameraActor* CameraActor, FLinearColor CameraColor, float Duration);
    static void DrawDebugBox(UObject* WorldContextObject, FVector Center, FVector Extent, FLinearColor LineColor, FRotator Rotation, float Duration, float Thickness);
    static void DrawDebugArrow(UObject* WorldContextObject, FVector LineStart, FVector LineEnd, float ArrowSize, FLinearColor LineColor, float Duration, float Thickness);
    static bool DoesImplementInterface(UObject* TestObject, UClass* Interface);
    static void DelayWorld(UWorld* World, float Duration, FLatentActionInfo LatentInfo);
    static void Delay(UObject* WorldContextObject, float Duration, FLatentActionInfo LatentInfo);
    static void CreateCopyForUndoBuffer(UObject* ObjectToModify);
    static FString ConvertToRelativePath(FString Filename);
    static FString ConvertToAbsolutePath(FString Filename);
    static void Conv_SoftObjPathToSoftObjRef(FSoftObjectPath& SoftObjectPath);
    static void Conv_SoftObjectReferenceToString();
    static void Conv_SoftObjectReferenceToObject();
    static void Conv_SoftClassReferenceToString();
    static void Conv_SoftClassReferenceToClass();
    static void Conv_SoftClassPathToSoftClassRef(FSoftClassPath& SoftClassPath);
    static FString Conv_PrimaryAssetTypeToString(FPrimaryAssetType PrimaryAssetType);
    static FString Conv_PrimaryAssetIdToString(FPrimaryAssetId PrimaryAssetId);
    static void Conv_ObjectToSoftObjectReference(UObject* Object);
    static void Conv_InterfaceToObject();
    static void Conv_ClassToSoftClassReference(UClass*& Class);
    static void ControlScreensaver(bool bAllowScreenSaver);
    static bool ComponentOverlapComponents(UPrimitiveComponent* Component, FTransform& ComponentTransform, TArray<EObjectTypeQuery>& ObjectTypes, UClass* ComponentClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<UPrimitiveComponent*>& OutComponents);
    static bool ComponentOverlapActors(UPrimitiveComponent* Component, FTransform& ComponentTransform, TArray<EObjectTypeQuery>& ObjectTypes, UClass* ActorClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<AActor*>& OutActors);
    static void CollectGarbage();
    static bool CapsuleTraceSingleForObjects(UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime);
    static bool CapsuleTraceSingleByProfile(UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime);
    static bool CapsuleTraceSingle(UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime);
    static bool CapsuleTraceMultiForObjects(UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime);
    static bool CapsuleTraceMultiByProfile(UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime);
    static bool CapsuleTraceMulti(UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime);
    static bool CapsuleOverlapComponents(UObject* WorldContextObject, FVector CapsulePos, float Radius, float HalfHeight, TArray<EObjectTypeQuery>& ObjectTypes, UClass* ComponentClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<UPrimitiveComponent*>& OutComponents);
    static bool CapsuleOverlapActors(UObject* WorldContextObject, FVector CapsulePos, float Radius, float HalfHeight, TArray<EObjectTypeQuery>& ObjectTypes, UClass* ActorClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<AActor*>& OutActors);
    static bool CanLaunchURL(FString URL);
    static void CancelTransaction(int32_t Index);
    static void BreakSoftObjectPath(FSoftObjectPath InSoftObjectPath, FString& PathString);
    static void BreakSoftClassPath(FSoftClassPath InSoftClassPath, FString& PathString);
    static bool BoxTraceSingleForObjects(UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime);
    static bool BoxTraceSingleByProfile(UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime);
    static bool BoxTraceSingle(UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime);
    static bool BoxTraceMultiForObjects(UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime);
    static bool BoxTraceMultiByProfile(UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime);
    static bool BoxTraceMulti(UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, EDrawDebugTrace::Type DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime);
    static bool BoxOverlapComponents(UObject* WorldContextObject, FVector BoxPos, FVector Extent, TArray<EObjectTypeQuery>& ObjectTypes, UClass* ComponentClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<UPrimitiveComponent*>& OutComponents);
    static bool BoxOverlapActors(UObject* WorldContextObject, FVector BoxPos, FVector BoxExtent, TArray<EObjectTypeQuery>& ObjectTypes, UClass* ActorClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<AActor*>& OutActors);
    static void BeginTransaction(FString Context);
    static void AsyncLoadObject();
    void AsyncLoadCallback__DelegateSignature(UObject* LoadedObject);
    static FDebugFloatHistory AddFloatHistorySample(float Value, FDebugFloatHistory& FloatHistory);
}; // Size: 0x28
#pragma pack(pop)
