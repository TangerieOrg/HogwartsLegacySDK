#pragma once
#include <cstdint>
#include "EChromaSDKDevice1DEnum\Type.hpp"
#include "EChromaSDKDevice2DEnum\Type.hpp"
#include "EChromaSDKDeviceEnum\Type.hpp"
#include "EChromaSDKKeyboardKey\Type.hpp"
#include "EChromaSDKMouseLed\Type.hpp"
#include "EChromaSDKStreamStatusEnum\Type.hpp"
#include "FChromaSDKColors.hpp"
#include "FChromaSDKEffectResult.hpp"
#include "FKey.hpp"
#include "FLinearColor.hpp"
#include "UBlueprintFunctionLibrary.hpp"
struct FChromaSDKGuid;
struct FChromaSDKAppInfoType;
#pragma pack(push, 1)
class UChromaSDKPluginBPLibrary : public UBlueprintFunctionLibrary {
public:
    static UChromaSDKPluginBPLibrary* StaticClass();
    static void UsePreloadingName(FString AnimationName, bool Flag);
    static void UsePreloading(int32_t animationId, bool Flag);
    static void UseIdleAnimations(bool Flag);
    static void UseIdleAnimation(EChromaSDKDeviceEnum::Type device, bool Flag);
    static void UnloadAnimationName(FString AnimationName);
    static void UnloadAnimation(int32_t animationId);
    static void TrimStartFramesName(FString AnimationName, int32_t NumberOfFrames);
    static void TrimStartFrames(int32_t animationId, int32_t NumberOfFrames);
    static void TrimFrameName(FString AnimationName, int32_t frameId);
    static void TrimFrame(int32_t animationId, int32_t frameId);
    static void TrimEndFramesName(FString AnimationName, int32_t lastFrameId);
    static void TrimEndFrames(int32_t animationId, int32_t lastFrameId);
    static FLinearColor ToLinearColor(int32_t colorParam);
    static int32_t ToBGR(FLinearColor& colorParam);
    static bool SupportsStreaming();
    static void SubtractNonZeroTargetAllKeysAllFramesOffsetName(FString sourceAnimationName, FString targetAnimationName, int32_t Offset);
    static void SubtractNonZeroTargetAllKeysAllFramesOffset(int32_t sourceAnimationId, int32_t targetAnimationId, int32_t Offset);
    static void SubtractNonZeroTargetAllKeysAllFramesName(FString sourceAnimationName, FString targetAnimationName);
    static void SubtractNonZeroTargetAllKeysAllFrames(int32_t sourceAnimationId, int32_t targetAnimationId);
    static void SubtractNonZeroAllKeysName(FString sourceAnimationName, FString targetAnimationName, int32_t frameId);
    static void SubtractNonZeroAllKeysAllFramesOffsetName(FString sourceAnimationName, FString targetAnimationName, int32_t Offset);
    static void SubtractNonZeroAllKeysAllFramesOffset(int32_t sourceAnimationId, int32_t targetAnimationId, int32_t Offset);
    static void SubtractNonZeroAllKeysAllFramesName(FString sourceAnimationName, FString targetAnimationName);
    static void SubtractNonZeroAllKeysAllFrames(int32_t sourceAnimationId, int32_t targetAnimationId);
    static void SubtractNonZeroAllKeys(int32_t sourceAnimationId, int32_t targetAnimationId, int32_t frameId);
    static void StreamWatchEnd();
    static void StreamWatch(FString streamId, int32_t Timestamp);
    static bool StreamSetFocus(FString streamFocus);
    static bool StreamReleaseShortcode(FString shortcode);
    static FString StreamGetStatusString(EChromaSDKStreamStatusEnum::Type Status);
    static EChromaSDKStreamStatusEnum::Type StreamGetStatus();
    static FString StreamGetKey(FString shortcode);
    static FString StreamGetId(FString shortcode);
    static FString StreamGetFocus();
    static FString StreamGetAuthShortcode(FString Platform, FString Title);
    static void StreamBroadcastEnd();
    static void StreamBroadcast(FString streamId, FString streamKey);
    static void StopAnimationType(EChromaSDKDeviceEnum::Type device);
    static void StopAnimations(TArray<FString>& animationNames);
    static void StopAnimationComposite(FString AnimationName);
    static void StopAnimation(FString AnimationName);
    static void StopAll();
    static void SetStaticColorAll(FLinearColor& Color);
    static void SetStaticColor(EChromaSDKDeviceEnum::Type device, FLinearColor& Color);
    static void SetMouseLedColor(EChromaSDKMouseLed::Type led, FLinearColor& colorParam, TArray<FChromaSDKColors>& Colors);
    static void SetKeysNonZeroColorName(FString AnimationName, int32_t FrameIndex, TArray_EChromaSDKKeyboardKey::Type>& Keys, FLinearColor& colorParam);
    static void SetKeysNonZeroColorAllFramesName(FString AnimationName, TArray_EChromaSDKKeyboardKey::Type>& Keys, FLinearColor& colorParam);
    static void SetKeysNonZeroColorAllFrames(int32_t animationId, TArray_EChromaSDKKeyboardKey::Type>& Keys, FLinearColor& colorParam);
    static void SetKeysNonZeroColor(int32_t animationId, int32_t FrameIndex, TArray_EChromaSDKKeyboardKey::Type>& Keys, FLinearColor& colorParam);
    static void SetKeysColorRGBName(FString AnimationName, int32_t FrameIndex, TArray_EChromaSDKKeyboardKey::Type>& Keys, int32_t Red, int32_t Green, int32_t Blue);
    static void SetKeysColorRGB(int32_t animationId, int32_t FrameIndex, TArray_EChromaSDKKeyboardKey::Type>& Keys, int32_t Red, int32_t Green, int32_t Blue);
    static void SetKeysColorName(FString AnimationName, int32_t FrameIndex, TArray_EChromaSDKKeyboardKey::Type>& Keys, FLinearColor& colorParam);
    static void SetKeysColorAllFramesRGBName(FString AnimationName, TArray_EChromaSDKKeyboardKey::Type>& Keys, int32_t Red, int32_t Green, int32_t Blue);
    static void SetKeysColorAllFramesRGB(int32_t animationId, TArray_EChromaSDKKeyboardKey::Type>& Keys, int32_t Red, int32_t Green, int32_t Blue);
    static void SetKeysColorAllFramesName(FString AnimationName, TArray_EChromaSDKKeyboardKey::Type>& Keys, FLinearColor& colorParam);
    static void SetKeysColorAllFrames(int32_t animationId, TArray_EChromaSDKKeyboardKey::Type>& Keys, FLinearColor& colorParam);
    static void SetKeysColor(int32_t animationId, int32_t FrameIndex, TArray_EChromaSDKKeyboardKey::Type>& Keys, FLinearColor& colorParam);
    static void SetKeyRowColumnColorName(FString AnimationName, int32_t FrameIndex, int32_t Row, int32_t Column, FLinearColor& colorParam);
    static void SetKeyNonZeroColorName(FString AnimationName, int32_t FrameIndex, EChromaSDKKeyboardKey::Type Key, FLinearColor& colorParam);
    static void SetKeyNonZeroColorAllFramesName(FString AnimationName, EChromaSDKKeyboardKey::Type Key, FLinearColor& colorParam);
    static void SetKeyNonZeroColorAllFrames(int32_t animationId, EChromaSDKKeyboardKey::Type Key, FLinearColor& colorParam);
    static void SetKeyNonZeroColor(int32_t animationId, int32_t FrameIndex, EChromaSDKKeyboardKey::Type Key, FLinearColor& colorParam);
    static void SetKeyColorName(FString AnimationName, int32_t FrameIndex, EChromaSDKKeyboardKey::Type Key, FLinearColor& colorParam);
    static void SetKeyColorAllFramesName(FString AnimationName, EChromaSDKKeyboardKey::Type Key, FLinearColor& colorParam);
    static void SetKeyColorAllFrames(int32_t animationId, EChromaSDKKeyboardKey::Type Key, FLinearColor& colorParam);
    static void SetKeyColor(int32_t animationId, int32_t FrameIndex, EChromaSDKKeyboardKey::Type Key, FLinearColor& colorParam);
    static void SetKeyboardKeyColor(EChromaSDKKeyboardKey::Type Key, FLinearColor& colorParam, TArray<FChromaSDKColors>& Colors);
    static void SetIdleAnimationName(FString AnimationName);
    static void SetCurrentFrameName(FString AnimationName, int32_t frameId);
    static void SetCurrentFrame(int32_t animationId, int32_t frameId);
    static void SetChromaCustomFlagName(FString AnimationName, bool Flag);
    static void SetChromaCustomColorAllFramesName(FString AnimationName);
    static void ReverseAllFramesName(FString AnimationName);
    static void ReverseAllFrames(int32_t animationId);
    static void ReduceFramesName(FString AnimationName, int32_t N);
    static void ReduceFrames(int32_t animationId, int32_t N);
    static void PreviewFrameName(FString AnimationName, int32_t frameId);
    static int32_t PreviewFrame(int32_t animationId, int32_t frameId);
    static void PlayAnimations(TArray<FString>& animationNames, bool Loop);
    static void PlayAnimationName(FString AnimationName, bool Loop);
    static void PlayAnimationComposite(FString AnimationName, bool Loop);
    static void PlayAnimation(FString AnimationName, bool Loop);
    static void OverrideFrameDurationName(FString AnimationName, float Duration);
    static void OpenAnimationFromMemory(TArray<uint8_t>& Data, FString AnimationName);
    static void OffsetNonZeroColorsName(FString AnimationName, int32_t frameId, int32_t Red, int32_t Green, int32_t Blue);
    static void OffsetNonZeroColorsAllFramesName(FString AnimationName, int32_t Red, int32_t Green, int32_t Blue);
    static void OffsetNonZeroColorsAllFrames(int32_t animationId, int32_t Red, int32_t Green, int32_t Blue);
    static void OffsetNonZeroColors(int32_t animationId, int32_t frameId, int32_t Red, int32_t Green, int32_t Blue);
    static void OffsetColorsName(FString AnimationName, int32_t frameId, int32_t Red, int32_t Green, int32_t Blue);
    static void OffsetColorsAllFramesName(FString AnimationName, int32_t Red, int32_t Green, int32_t Blue);
    static void OffsetColorsAllFrames(int32_t animationId, int32_t Red, int32_t Green, int32_t Blue);
    static void OffsetColors(int32_t animationId, int32_t frameId, int32_t Red, int32_t Green, int32_t Blue);
    static void MultiplyTargetColorLerpAllFramesName(FString AnimationName, FLinearColor& colorParam1, FLinearColor& colorParam2);
    static void MultiplyTargetColorLerpAllFrames(int32_t animationId, FLinearColor& colorParam1, FLinearColor& colorParam2);
    static void MultiplyNonZeroTargetColorLerpAllFramesName(FString AnimationName, FLinearColor& colorParam1, FLinearColor& colorParam2);
    static void MultiplyNonZeroTargetColorLerpAllFrames(int32_t animationId, FLinearColor& colorParam1, FLinearColor& colorParam2);
    static void MultiplyIntensityRGBName(FString AnimationName, int32_t frameId, int32_t Red, int32_t Green, int32_t Blue);
    static void MultiplyIntensityRGB(int32_t animationId, int32_t frameId, int32_t Red, int32_t Green, int32_t Blue);
    static void MultiplyIntensityName(FString AnimationName, int32_t frameId, float Intensity);
    static void MultiplyIntensityColorName(FString AnimationName, int32_t frameId, FLinearColor& colorParam);
    static void MultiplyIntensityColorAllFramesName(FString AnimationName, FLinearColor& colorParam);
    static void MultiplyIntensityColorAllFrames(int32_t animationId, FLinearColor& colorParam);
    static void MultiplyIntensityColor(int32_t animationId, int32_t frameId, FLinearColor& colorParam);
    static void MultiplyIntensityAllFramesRGBName(FString AnimationName, int32_t Red, int32_t Green, int32_t Blue);
    static void MultiplyIntensityAllFramesRGB(int32_t animationId, int32_t Red, int32_t Green, int32_t Blue);
    static void MultiplyIntensityAllFramesName(FString AnimationName, float Intensity);
    static void MultiplyIntensityAllFrames(int32_t animationId, float Intensity);
    static void MultiplyIntensity(int32_t animationId, int32_t frameId, float Intensity);
    static void MultiplyColorLerpAllFramesName(FString AnimationName, FLinearColor& colorParam1, FLinearColor& colorParam2);
    static void MultiplyColorLerpAllFrames(int32_t animationId, FLinearColor& colorParam1, FLinearColor& colorParam2);
    static void MakeBlankFramesRGBName(FString AnimationName, int32_t frameCount, float Duration, int32_t Red, int32_t Green, int32_t Blue);
    static void MakeBlankFramesRGB(int32_t animationId, int32_t frameCount, float Duration, int32_t Red, int32_t Green, int32_t Blue);
    static void MakeBlankFramesRandomName(FString AnimationName, int32_t frameCount, float Duration);
    static void MakeBlankFramesRandomBlackAndWhiteName(FString AnimationName, int32_t frameCount, float Duration);
    static void MakeBlankFramesRandomBlackAndWhite(int32_t animationId, int32_t frameCount, float Duration);
    static void MakeBlankFramesRandom(int32_t animationId, int32_t frameCount, float Duration);
    static void MakeBlankFramesName(FString AnimationName, int32_t frameCount, float Duration, FLinearColor& colorParam);
    static void MakeBlankFrames(int32_t animationId, int32_t frameCount, float Duration, FLinearColor& colorParam);
    static void LoadAnimationName(FString AnimationName);
    static void LoadAnimation(int32_t animationId);
    static int32_t LerpColorBGR(int32_t From, int32_t To, float T);
    static FLinearColor LerpColor(FLinearColor colorParam1, FLinearColor colorParam2, float T);
    static float Lerp(float Start, float End, float amt);
    static bool IsPlatformWindows();
    static bool IsInitialized();
    static bool IsAnimationTypePlaying(EChromaSDKDeviceEnum::Type device);
    static bool IsAnimationPlaying(FString AnimationName);
    static void InvertColorsAllFramesName(FString AnimationName);
    static void InvertColorsAllFrames(int32_t animationId);
    static void InsertFrameName(FString AnimationName, int32_t sourceFrame, int32_t targetFrame);
    static void InsertFrame(int32_t animationId, int32_t sourceFrame, int32_t targetFrame);
    static void InsertDelayName(FString AnimationName, int32_t frameId, int32_t Delay);
    static void InsertDelay(int32_t animationId, int32_t frameId, int32_t Delay);
    static FLinearColor GetRGB(int32_t Red, int32_t Green, int32_t Blue);
    static int32_t GetPlayingAnimationId(int32_t Index);
    static int32_t GetPlayingAnimationCount();
    static FLinearColor GetMouseLedColor(EChromaSDKMouseLed::Type led, TArray<FChromaSDKColors>& Colors);
    static int32_t GetMaxRow(EChromaSDKDevice2DEnum::Type device);
    static int32_t GetMaxLeds(EChromaSDKDevice1DEnum::Type device);
    static int32_t GetMaxColumn(EChromaSDKDevice2DEnum::Type device);
    static FLinearColor GetKeyColorName(FString AnimationName, int32_t FrameIndex, EChromaSDKKeyboardKey::Type Key);
    static FLinearColor GetKeyColor(int32_t animationId, int32_t FrameIndex, EChromaSDKKeyboardKey::Type Key);
    static int32_t GetKeyboardRzKey(EChromaSDKKeyboardKey::Type Key);
    static EChromaSDKKeyboardKey::Type GetKeyboardRazerKey(FKey Key);
    static FLinearColor GetKeyboardKeyColor(EChromaSDKKeyboardKey::Type Key, TArray<FChromaSDKColors>& Colors);
    static int32_t GetFrameCountName(FString AnimationName);
    static int32_t GetFrameCount(int32_t animationId);
    static int32_t GetCurrentFrameName(FString AnimationName);
    static int32_t GetCurrentFrame(int32_t animationId);
    static int32_t GetBGRInt(int32_t Red, int32_t Green, int32_t Blue);
    static FString GetAnimationName(int32_t animationId);
    static int32_t GetAnimationIdByIndex(int32_t Index);
    static int32_t GetAnimationId(FString AnimationName);
    static int32_t GetAnimationCount();
    static int32_t GetAnimation(FString AnimationName);
    static void FillZeroColorRGBName(FString AnimationName, int32_t frameId, int32_t Red, int32_t Green, int32_t Blue);
    static void FillZeroColorRGB(int32_t animationId, int32_t frameId, int32_t Red, int32_t Green, int32_t Blue);
    static void FillZeroColorName(FString AnimationName, int32_t frameId, FLinearColor& colorParam);
    static void FillZeroColorAllFramesRGBName(FString AnimationName, int32_t Red, int32_t Green, int32_t Blue);
    static void FillZeroColorAllFramesRGB(int32_t animationId, int32_t Red, int32_t Green, int32_t Blue);
    static void FillZeroColorAllFramesName(FString AnimationName, FLinearColor& colorParam);
    static void FillZeroColorAllFrames(int32_t animationId, FLinearColor& colorParam);
    static void FillZeroColor(int32_t animationId, int32_t frameId, FLinearColor& colorParam);
    static void FillThresholdRGBColorsAllFramesRGBName(FString AnimationName, int32_t redThreshold, int32_t greenThreshold, int32_t blueThreshold, int32_t Red, int32_t Green, int32_t Blue);
    static void FillThresholdRGBColorsAllFramesRGB(int32_t animationId, int32_t redThreshold, int32_t greenThreshold, int32_t blueThreshold, int32_t Red, int32_t Green, int32_t Blue);
    static void FillThresholdColorsRGBName(FString AnimationName, int32_t frameId, int32_t Threshold, int32_t Red, int32_t Green, int32_t Blue);
    static void FillThresholdColorsRGB(int32_t animationId, int32_t frameId, int32_t Threshold, int32_t Red, int32_t Green, int32_t Blue);
    static void FillThresholdColorsMinMaxAllFramesRGBName(FString AnimationName, int32_t minThreshold, int32_t minRed, int32_t minGreen, int32_t minBlue, int32_t maxThreshold, int32_t maxRed, int32_t maxGreen, int32_t maxBlue);
    static void FillThresholdColorsMinMaxAllFramesRGB(int32_t animationId, int32_t minThreshold, int32_t minRed, int32_t minGreen, int32_t minBlue, int32_t maxThreshold, int32_t maxRed, int32_t maxGreen, int32_t maxBlue);
    static void FillThresholdColorsAllFramesRGBName(FString AnimationName, int32_t Threshold, int32_t Red, int32_t Green, int32_t Blue);
    static void FillThresholdColorsAllFramesRGB(int32_t animationId, int32_t Threshold, int32_t Red, int32_t Green, int32_t Blue);
    static void FillThresholdColorsAllFramesName(FString AnimationName, int32_t Threshold, FLinearColor& colorParam);
    static void FillThresholdColorsAllFrames(int32_t animationId, int32_t Threshold, FLinearColor& colorParam);
    static void FillRandomColorsName(FString AnimationName, int32_t frameId);
    static void FillRandomColorsBlackAndWhiteName(FString AnimationName, int32_t frameId);
    static void FillRandomColorsBlackAndWhiteAllFramesName(FString AnimationName);
    static void FillRandomColorsBlackAndWhiteAllFrames(int32_t animationId);
    static void FillRandomColorsBlackAndWhite(int32_t animationId, int32_t frameId);
    static void FillRandomColorsAllFramesName(FString AnimationName);
    static void FillRandomColorsAllFrames(int32_t animationId);
    static void FillRandomColors(int32_t animationId, int32_t frameId);
    static void FillNonZeroColorRGBName(FString AnimationName, int32_t frameId, int32_t Red, int32_t Green, int32_t Blue);
    static void FillNonZeroColorRGB(int32_t animationId, int32_t frameId, int32_t Red, int32_t Green, int32_t Blue);
    static void FillNonZeroColorName(FString AnimationName, int32_t frameId, FLinearColor& colorParam);
    static void FillNonZeroColorAllFramesRGBName(FString AnimationName, int32_t Red, int32_t Green, int32_t Blue);
    static void FillNonZeroColorAllFramesRGB(int32_t animationId, int32_t Red, int32_t Green, int32_t Blue);
    static void FillNonZeroColorAllFramesName(FString AnimationName, FLinearColor& colorParam);
    static void FillNonZeroColorAllFrames(int32_t animationId, FLinearColor& colorParam);
    static void FillNonZeroColor(int32_t animationId, int32_t frameId, FLinearColor& colorParam);
    static void FillColorRGBName(FString AnimationName, int32_t frameId, int32_t Red, int32_t Green, int32_t Blue);
    static void FillColorRGB(int32_t animationId, int32_t frameId, int32_t Red, int32_t Green, int32_t Blue);
    static void FillColorName(FString AnimationName, int32_t frameId, FLinearColor& colorParam);
    static void FillColorAllFramesRGBName(FString AnimationName, int32_t Red, int32_t Green, int32_t Blue);
    static void FillColorAllFramesRGB(int32_t animationId, int32_t Red, int32_t Green, int32_t Blue);
    static void FillColorAllFramesName(FString AnimationName, FLinearColor& colorParam);
    static void FillColorAllFrames(int32_t animationId, FLinearColor& colorParam);
    static void FillColor(int32_t animationId, int32_t frameId, FLinearColor& colorParam);
    static void FadeStartFramesName(FString AnimationName, int32_t fade);
    static void FadeStartFrames(int32_t animationId, int32_t fade);
    static void FadeEndFramesName(FString AnimationName, int32_t fade);
    static void FadeEndFrames(int32_t animationId, int32_t fade);
    static void DuplicateMirrorFramesName(FString AnimationName);
    static void DuplicateMirrorFrames(int32_t animationId);
    static void DuplicateFramesName(FString AnimationName);
    static void DuplicateFrames(int32_t animationId);
    static void DuplicateFirstFrameName(FString AnimationName, int32_t frameCount);
    static void DuplicateFirstFrame(int32_t animationId, int32_t frameCount);
    static TArray<FChromaSDKColors> CreateRandomColorsBlackAndWhite2D(EChromaSDKDevice2DEnum::Type device);
    static TArray<FLinearColor> CreateRandomColorsBlackAndWhite1D(EChromaSDKDevice1DEnum::Type device);
    static TArray<FChromaSDKColors> CreateRandomColors2D(EChromaSDKDevice2DEnum::Type device);
    static TArray<FLinearColor> CreateRandomColors1D(EChromaSDKDevice1DEnum::Type device);
    static TArray<FChromaSDKColors> CreateColors2D(EChromaSDKDevice2DEnum::Type device);
    static TArray<FLinearColor> CreateColors1D(EChromaSDKDevice1DEnum::Type device);
    static void CopyZeroTargetAllKeysAllFramesName(FString sourceAnimationName, FString targetAnimationName);
    static void CopyZeroTargetAllKeysAllFrames(int32_t sourceAnimationId, int32_t targetAnimationId);
    static void CopyNonZeroTargetAllKeysName(FString sourceAnimationName, FString targetAnimationName, int32_t frameId);
    static void CopyNonZeroTargetAllKeysAllFramesOffsetName(FString sourceAnimationName, FString targetAnimationName, int32_t Offset);
    static void CopyNonZeroTargetAllKeysAllFramesOffset(int32_t sourceAnimationId, int32_t targetAnimationId, int32_t Offset);
    static void CopyNonZeroTargetAllKeysAllFramesName(FString sourceAnimationName, FString targetAnimationName);
    static void CopyNonZeroTargetAllKeysAllFrames(int32_t sourceAnimationId, int32_t targetAnimationId);
    static void CopyNonZeroTargetAllKeys(int32_t sourceAnimationId, int32_t targetAnimationId, int32_t frameId);
    static void CopyNonZeroKeysColorName(FString sourceAnimationName, FString targetAnimationName, int32_t FrameIndex, TArray_EChromaSDKKeyboardKey::Type>& Keys);
    static void CopyNonZeroKeysColorAllFramesName(FString sourceAnimationName, FString targetAnimationName, TArray_EChromaSDKKeyboardKey::Type>& Keys);
    static void CopyNonZeroKeysColorAllFrames(int32_t sourceAnimationId, int32_t targetAnimationId, TArray_EChromaSDKKeyboardKey::Type>& Keys);
    static void CopyNonZeroKeysColor(int32_t sourceAnimationId, int32_t targetAnimationId, int32_t FrameIndex, TArray_EChromaSDKKeyboardKey::Type>& Keys);
    static void CopyNonZeroKeyColorName(FString sourceAnimationName, FString targetAnimationName, int32_t FrameIndex, EChromaSDKKeyboardKey::Type Key);
    static void CopyNonZeroKeyColor(int32_t sourceAnimationId, int32_t targetAnimationId, int32_t FrameIndex, EChromaSDKKeyboardKey::Type Key);
    static void CopyNonZeroAllKeysOffsetName(FString sourceAnimationName, FString targetAnimationName, int32_t frameId, int32_t Offset);
    static void CopyNonZeroAllKeysOffset(int32_t sourceAnimationId, int32_t targetAnimationId, int32_t frameId, int32_t Offset);
    static void CopyNonZeroAllKeysName(FString sourceAnimationName, FString targetAnimationName, int32_t frameId);
    static void CopyNonZeroAllKeysAllFramesOffsetName(FString sourceAnimationName, FString targetAnimationName, int32_t Offset);
    static void CopyNonZeroAllKeysAllFramesOffset(int32_t sourceAnimationId, int32_t targetAnimationId, int32_t Offset);
    static void CopyNonZeroAllKeysAllFramesName(FString sourceAnimationName, FString targetAnimationName);
    static void CopyNonZeroAllKeysAllFrames(int32_t sourceAnimationId, int32_t targetAnimationId);
    static void CopyNonZeroAllKeys(int32_t sourceAnimationId, int32_t targetAnimationId, int32_t frameId);
    static void CopyKeysColorName(FString sourceAnimationName, FString targetAnimationName, int32_t FrameIndex, TArray_EChromaSDKKeyboardKey::Type>& Keys);
    static void CopyKeysColorAllFramesName(FString sourceAnimationName, FString targetAnimationName, TArray_EChromaSDKKeyboardKey::Type>& Keys);
    static void CopyKeysColorAllFrames(int32_t sourceAnimationId, int32_t targetAnimationId, TArray_EChromaSDKKeyboardKey::Type>& Keys);
    static void CopyKeysColor(int32_t sourceAnimationId, int32_t targetAnimationId, int32_t FrameIndex, TArray_EChromaSDKKeyboardKey::Type>& Keys);
    static void CopyKeyColorName(FString sourceAnimationName, FString targetAnimationName, int32_t FrameIndex, EChromaSDKKeyboardKey::Type Key);
    static void CopyKeyColor(int32_t sourceAnimationId, int32_t targetAnimationId, int32_t FrameIndex, EChromaSDKKeyboardKey::Type Key);
    static void CopyAnimationName(FString sourceAnimationName, FString targetAnimationName);
    static void CopyAnimation(int32_t sourceAnimationId, FString targetAnimationName);
    static void CopyAllKeysName(FString sourceAnimationName, FString targetAnimationName, int32_t frameId);
    static void CopyAllKeysAllFramesName(FString sourceAnimationName, FString targetAnimationName);
    static void CopyAllKeysAllFrames(int32_t sourceAnimationId, int32_t targetAnimationId);
    static void CopyAllKeys(int32_t sourceAnimationId, int32_t targetAnimationId, int32_t frameId);
    static void CloseAnimationName(FString AnimationName);
    static void CloseAnimation(int32_t animationId);
    static void CloseAll();
    static void ClearAnimationType(EChromaSDKDeviceEnum::Type device);
    static void ClearAll();
    static int32_t ChromaSDKUnInit();
    static int32_t ChromaSDKSetEffect(FChromaSDKGuid& EffectId);
    static int32_t ChromaSDKInitSDK(FChromaSDKAppInfoType& appInfo);
    static int32_t ChromaSDKInit();
    static int32_t ChromaSDKDeleteEffect(FChromaSDKGuid& EffectId);
    static FChromaSDKEffectResult ChromaSDKCreateEffectStatic(EChromaSDKDeviceEnum::Type device, FLinearColor& colorParam);
    static FChromaSDKEffectResult ChromaSDKCreateEffectNone(EChromaSDKDeviceEnum::Type device);
    static FChromaSDKEffectResult ChromaSDKCreateEffectKeyboardCustom2D(TArray<FChromaSDKColors>& Colors);
    static FChromaSDKEffectResult ChromaSDKCreateEffectCustom2D(EChromaSDKDevice2DEnum::Type device, TArray<FChromaSDKColors>& Colors);
    static FChromaSDKEffectResult ChromaSDKCreateEffectCustom1D(EChromaSDKDevice1DEnum::Type device, TArray<FLinearColor>& Colors);
    static void AppendAllFramesName(FString sourceAnimationName, FString targetAnimationName);
    static void AppendAllFrames(int32_t sourceAnimationId, int32_t targetAnimationId);
    static void AddNonZeroTargetAllKeysAllFramesOffsetName(FString sourceAnimationName, FString targetAnimationName, int32_t Offset);
    static void AddNonZeroTargetAllKeysAllFramesOffset(int32_t sourceAnimationId, int32_t targetAnimationId, int32_t Offset);
    static void AddNonZeroTargetAllKeysAllFramesName(FString sourceAnimationName, FString targetAnimationName);
    static void AddNonZeroTargetAllKeysAllFrames(int32_t sourceAnimationId, int32_t targetAnimationId);
    static void AddNonZeroAllKeysName(FString sourceAnimationName, FString targetAnimationName, int32_t frameId);
    static void AddNonZeroAllKeysAllFramesOffsetName(FString sourceAnimationName, FString targetAnimationName, int32_t Offset);
    static void AddNonZeroAllKeysAllFramesOffset(int32_t sourceAnimationId, int32_t targetAnimationId, int32_t Offset);
    static void AddNonZeroAllKeysAllFramesName(FString sourceAnimationName, FString targetAnimationName);
    static void AddNonZeroAllKeysAllFrames(int32_t sourceAnimationId, int32_t targetAnimationId);
    static void AddNonZeroAllKeys(int32_t sourceAnimationId, int32_t targetAnimationId, int32_t frameId);
}; // Size: 0x28
#pragma pack(pop)
