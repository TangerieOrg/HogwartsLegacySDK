#pragma once
#include <cstdint>
#include "EAxis\Type.hpp"
#include "EEasingFunc\Type.hpp"
#include "ELerpInterpolationMode\Type.hpp"
#include "EMatrixColumns\Type.hpp"
#include "FBox.hpp"
#include "FBox2D.hpp"
#include "FColor.hpp"
#include "FDateTime.hpp"
#include "FFrameNumber.hpp"
#include "FFrameRate.hpp"
#include "FIntPoint.hpp"
#include "FIntVector.hpp"
#include "FLinearColor.hpp"
#include "FMatrix.hpp"
#include "FPlane.hpp"
#include "FQualifiedFrameTime.hpp"
#include "FQuat.hpp"
#include "FRandomStream.hpp"
#include "FRotator.hpp"
#include "FTimespan.hpp"
#include "FTransform.hpp"
#include "FVector.hpp"
#include "FVector2D.hpp"
#include "FVector4.hpp"
#include "UBlueprintFunctionLibrary.hpp"
struct FVectorSpringState;
class UObject;
class UClass;
struct FFloatSpringState;
#pragma pack(push, 1)
class UKismetMathLibrary : public UBlueprintFunctionLibrary {
public:
    static UKismetMathLibrary* StaticClass();
    static int32_t Xor_IntInt(int32_t A, int32_t B);
    static int64_t Xor_Int64Int64(int64_t A, int64_t B);
    static int32_t Wrap(int32_t Value, int32_t Min, int32_t Max);
    static FVector WeightedMovingAverage_FVector(FVector CurrentSample, FVector PreviousSample, float weight);
    static FRotator WeightedMovingAverage_FRotator(FRotator CurrentSample, FRotator PreviousSample, float weight);
    static float WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float weight);
    static float VSizeXYSquared(FVector A);
    static float VSizeXY(FVector A);
    static float VSizeSquared(FVector A);
    static float VSize2DSquared(FVector2D A);
    static float VSize2D(FVector2D A);
    static float VSize(FVector A);
    static FVector VLerp(FVector A, FVector B, float Alpha);
    static FVector VInterpTo_Constant(FVector Current, FVector Target, float DeltaTime, float InterpSpeed);
    static FVector VInterpTo(FVector Current, FVector Target, float DeltaTime, float InterpSpeed);
    static FVector VectorSpringInterp(FVector Current, FVector Target, FVectorSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);
    static FVector Vector_Zero();
    static FVector Vector_Up();
    static void Vector_UnwindEuler(FVector& A);
    static FVector2D Vector_UnitCartesianToSpherical(FVector A);
    static FVector Vector_ToRadians(FVector A);
    static FVector Vector_ToDegrees(FVector A);
    static FVector Vector_SnappedToGrid(FVector InVect, float InGridSize);
    static void Vector_Set(FVector& A, float X, float Y, float Z);
    static FVector Vector_Right();
    static FVector Vector_Reciprocal(FVector& A);
    static FVector Vector_ProjectOnToNormal(FVector V, FVector InNormal);
    static FVector Vector_One();
    static FVector Vector_NormalUnsafe(FVector& A);
    static void Vector_Normalize(FVector& A, float Tolerance);
    static FVector Vector_Normal2D(FVector A, float Tolerance);
    static FVector Vector_MirrorByPlane(FVector A, FPlane& InPlane);
    static FVector Vector_Left();
    static bool Vector_IsZero(FVector& A);
    static bool Vector_IsUnit(FVector& A, float SquaredLenthTolerance);
    static bool Vector_IsUniform(FVector& A, float Tolerance);
    static bool Vector_IsNormal(FVector& A);
    static bool Vector_IsNearlyZero(FVector& A, float Tolerance);
    static bool Vector_IsNAN(FVector& A);
    static float Vector_HeadingAngle(FVector A);
    static FVector Vector_GetSignVector(FVector A);
    static FVector Vector_GetProjection(FVector A);
    static float Vector_GetAbsMin(FVector A);
    static float Vector_GetAbsMax(FVector A);
    static FVector Vector_GetAbs(FVector A);
    static FVector Vector_Forward();
    static FVector Vector_Down();
    static float Vector_DistanceSquared(FVector v1, FVector v2);
    static float Vector_Distance2DSquared(FVector v1, FVector v2);
    static float Vector_Distance2D(FVector v1, FVector v2);
    static float Vector_Distance(FVector v1, FVector v2);
    static float Vector_CosineAngle2D(FVector A, FVector B);
    static FVector Vector_ComponentMin(FVector A, FVector B);
    static FVector Vector_ComponentMax(FVector A, FVector B);
    static FVector Vector_ClampSizeMax2D(FVector A, float Max);
    static FVector Vector_ClampSizeMax(FVector A, float Max);
    static FVector Vector_ClampSize2D(FVector A, float Min, float Max);
    static FVector Vector_BoundedToCube(FVector InVect, float InRadius);
    static FVector Vector_BoundedToBox(FVector InVect, FVector InBoxMin, FVector InBoxMax);
    static FVector Vector_Backward();
    static void Vector_Assign(FVector& A, FVector& InVector);
    static void Vector_AddBounded(FVector& A, FVector InAddVect, float InRadius);
    static FVector4 Vector4_Zero();
    static float Vector4_SizeSquared3(FVector4& A);
    static float Vector4_SizeSquared(FVector4& A);
    static float Vector4_Size3(FVector4& A);
    static float Vector4_Size(FVector4& A);
    static void Vector4_Set(FVector4& A, float X, float Y, float Z, float W);
    static FVector4 Vector4_NormalUnsafe3(FVector4& A);
    static void Vector4_Normalize3(FVector4& A, float Tolerance);
    static FVector4 Vector4_Normal3(FVector4& A, float Tolerance);
    static FVector4 Vector4_Negated(FVector4& A);
    static FVector4 Vector4_MirrorByVector3(FVector4& Direction, FVector4& SurfaceNormal);
    static bool Vector4_IsZero(FVector4& A);
    static bool Vector4_IsUnit3(FVector4& A, float SquaredLenthTolerance);
    static bool Vector4_IsNormal3(FVector4& A);
    static bool Vector4_IsNearlyZero3(FVector4& A, float Tolerance);
    static bool Vector4_IsNAN(FVector4& A);
    static float Vector4_DotProduct3(FVector4& A, FVector4& B);
    static float Vector4_DotProduct(FVector4& A, FVector4& B);
    static FVector4 Vector4_CrossProduct3(FVector4& A, FVector4& B);
    static void Vector4_Assign(FVector4& A, FVector4& InVector);
    static FVector2D Vector2DInterpTo_Constant(FVector2D Current, FVector2D Target, float DeltaTime, float InterpSpeed);
    static FVector2D Vector2DInterpTo(FVector2D Current, FVector2D Target, float DeltaTime, float InterpSpeed);
    static FVector2D Vector2D_Zero();
    static FVector2D Vector2D_Unit45Deg();
    static FVector2D Vector2D_One();
    static FVector VEase(FVector A, FVector B, float Alpha, EEasingFunc::Type EasingFunc, float BlendExp, int32_t Steps);
    static FDateTime UtcNow();
    static FVector4 TransformVector4(FMatrix& Matrix, FVector4& Vec4);
    static FRotator TransformRotation(FTransform& T, FRotator Rotation);
    static FVector TransformLocation(FTransform& T, FVector Location);
    static FVector TransformDirection(FTransform& T, FVector Direction);
    static float Transform_Determinant(FTransform& Transform);
    static FVector2D ToSign2D(FVector2D A);
    static FVector2D ToRounded2D(FVector2D A);
    static void ToDirectionAndLength2D(FVector2D A, FVector2D& OutDir, float& OutLength);
    static FDateTime Today();
    static FTransform TLerp(FTransform& A, FTransform& B, float Alpha, ELerpInterpolationMode::Type InterpMode);
    static FTransform TInterpTo(FTransform& Current, FTransform& Target, float DeltaTime, float InterpSpeed);
    static FTimespan TimespanZeroValue();
    static float TimespanRatio(FTimespan A, FTimespan B);
    static FTimespan TimespanMinValue();
    static FTimespan TimespanMaxValue();
    static bool TimespanFromString(FString TimespanString, FTimespan& Result);
    static FTransform TEase(FTransform& A, FTransform& B, float Alpha, EEasingFunc::Type EasingFunc, float BlendExp, int32_t Steps);
    static float Tan(float A);
    static FVector Subtract_VectorVector(FVector A, FVector B);
    static FVector Subtract_VectorInt(FVector A, int32_t B);
    static FVector Subtract_VectorFloat(FVector A, float B);
    static FVector4 Subtract_Vector4Vector4(FVector4& A, FVector4& B);
    static FVector2D Subtract_Vector2DVector2D(FVector2D A, FVector2D B);
    static FVector2D Subtract_Vector2DFloat(FVector2D A, float B);
    static FTimespan Subtract_TimespanTimespan(FTimespan A, FTimespan B);
    static FQuat Subtract_QuatQuat(FQuat& A, FQuat& B);
    static FLinearColor Subtract_LinearColorLinearColor(FLinearColor A, FLinearColor B);
    static FIntPoint Subtract_IntPointIntPoint(FIntPoint A, FIntPoint B);
    static FIntPoint Subtract_IntPointInt(FIntPoint A, int32_t B);
    static int32_t Subtract_IntInt(int32_t A, int32_t B);
    static int64_t Subtract_Int64Int64(int64_t A, int64_t B);
    static float Subtract_FloatFloat(float A, float B);
    static FDateTime Subtract_DateTimeTimespan(FDateTime A, FTimespan B);
    static FTimespan Subtract_DateTimeDateTime(FDateTime A, FDateTime B);
    static uint8_t Subtract_ByteByte(uint8_t A, uint8_t B);
    static float Square(float A);
    static float Sqrt(float A);
    static FVector Spherical2DToUnitCartesian(FVector2D A);
    static float Sin(float A);
    static int64_t SignOfInteger64(int64_t A);
    static int32_t SignOfInteger(int32_t A);
    static float SignOfFloat(float A);
    static void SetRandomStreamSeed(FRandomStream& Stream, int32_t NewSeed);
    static void Set2D(FVector2D& A, float X, float Y);
    static FVector SelectVector(FVector A, FVector B, bool bPickA);
    static FTransform SelectTransform(FTransform& A, FTransform& B, bool bPickA);
    static FString SelectString(FString A, FString B, bool bPickA);
    static FRotator SelectRotator(FRotator A, FRotator B, bool bPickA);
    static UObject* SelectObject(UObject* A, UObject* B, bool bSelectA);
    static int32_t SelectInt(int32_t A, int32_t B, bool bPickA);
    static float SelectFloat(float A, float B, bool bPickA);
    static FLinearColor SelectColor(FLinearColor A, FLinearColor B, bool bPickA);
    static UClass* SelectClass(UClass* A, UClass* B, bool bSelectA);
    static void SeedRandomStream(FRandomStream& Stream);
    static float SafeDivide(float A, float B);
    static int64_t Round64(float A);
    static int32_t Round(float A);
    static FRotator RotatorFromAxisAndAngle(FVector Axis, float Angle);
    static FVector RotateAngleAxis(FVector InVect, float AngleDeg, FVector Axis);
    static FRotator RLerp(FRotator A, FRotator B, float Alpha, bool bShortestPath);
    static FRotator RInterpTo_Constant(FRotator Current, FRotator Target, float DeltaTime, float InterpSpeed);
    static FRotator RInterpTo(FRotator Current, FRotator Target, float DeltaTime, float InterpSpeed);
    static void RGBToHSV_Vector(FLinearColor RGB, FLinearColor& HSV);
    static void RGBToHSV(FLinearColor InColor, float& H, float& S, float& V, float& A);
    static FLinearColor RGBLinearToHSV(FLinearColor RGB);
    static void ResetVectorSpringState(FVectorSpringState& SpringState);
    static void ResetRandomStream(FRandomStream& Stream);
    static void ResetFloatSpringState(FFloatSpringState& SpringState);
    static FRotator REase(FRotator A, FRotator B, float Alpha, bool bShortestPath, EEasingFunc::Type EasingFunc, float BlendExp, int32_t Steps);
    static FVector RandomUnitVectorInEllipticalConeInRadiansFromStream(FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians, FRandomStream& Stream);
    static FVector RandomUnitVectorInEllipticalConeInRadians(FVector ConeDir, float MaxYawInRadians, float MaxPitchInRadians);
    static FVector RandomUnitVectorInEllipticalConeInDegreesFromStream(FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, FRandomStream& Stream);
    static FVector RandomUnitVectorInEllipticalConeInDegrees(FVector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);
    static FVector RandomUnitVectorInConeInRadiansFromStream(FVector& ConeDir, float ConeHalfAngleInRadians, FRandomStream& Stream);
    static FVector RandomUnitVectorInConeInRadians(FVector ConeDir, float ConeHalfAngleInRadians);
    static FVector RandomUnitVectorInConeInDegreesFromStream(FVector& ConeDir, float ConeHalfAngleInDegrees, FRandomStream& Stream);
    static FVector RandomUnitVectorInConeInDegrees(FVector ConeDir, float ConeHalfAngleInDegrees);
    static FVector RandomUnitVectorFromStream(FRandomStream& Stream);
    static FVector RandomUnitVector();
    static FRotator RandomRotatorFromStream(bool bRoll, FRandomStream& Stream);
    static FRotator RandomRotator(bool bRoll);
    static FVector RandomPointInBoundingBoxFromStream(FVector Origin, FVector BoxExtent, FRandomStream& Stream);
    static FVector RandomPointInBoundingBox(FVector Origin, FVector BoxExtent);
    static int32_t RandomIntegerInRangeFromStream(int32_t Min, int32_t Max, FRandomStream& Stream);
    static int32_t RandomIntegerInRange(int32_t Min, int32_t Max);
    static int32_t RandomIntegerFromStream(int32_t Max, FRandomStream& Stream);
    static int64_t RandomInteger64InRange(int64_t Min, int64_t Max);
    static int64_t RandomInteger64(int64_t Max);
    static int32_t RandomInteger(int32_t Max);
    static float RandomFloatInRangeFromStream(float Min, float Max, FRandomStream& Stream);
    static float RandomFloatInRange(float Min, float Max);
    static float RandomFloatFromStream(FRandomStream& Stream);
    static float RandomFloat();
    static bool RandomBoolWithWeightFromStream(float weight, FRandomStream& RandomStream);
    static bool RandomBoolWithWeight(float weight);
    static bool RandomBoolFromStream(FRandomStream& Stream);
    static bool RandomBool();
    static float RadiansToDegrees(float A);
    static FVector Quat_VectorUp(FQuat& Q);
    static FVector Quat_VectorRight(FQuat& Q);
    static FVector Quat_VectorForward(FQuat& Q);
    static FVector Quat_UnrotateVector(FQuat& Q, FVector& V);
    static float Quat_SizeSquared(FQuat& Q);
    static float Quat_Size(FQuat& Q);
    static void Quat_SetFromEuler(FQuat& Q, FVector& Euler);
    static void Quat_SetComponents(FQuat& Q, float X, float Y, float Z, float W);
    static FRotator Quat_Rotator(FQuat& Q);
    static FVector Quat_RotateVector(FQuat& Q, FVector& V);
    static FQuat Quat_Normalized(FQuat& Q, float Tolerance);
    static void Quat_Normalize(FQuat& Q, float Tolerance);
    static FQuat Quat_MakeFromEuler(FVector& Euler);
    static FQuat Quat_Log(FQuat& Q);
    static bool Quat_IsNormalized(FQuat& Q);
    static bool Quat_IsNonFinite(FQuat& Q);
    static bool Quat_IsIdentity(FQuat& Q, float Tolerance);
    static bool Quat_IsFinite(FQuat& Q);
    static FQuat Quat_Inversed(FQuat& Q);
    static FQuat Quat_Identity();
    static FVector Quat_GetRotationAxis(FQuat& Q);
    static FVector Quat_GetAxisZ(FQuat& Q);
    static FVector Quat_GetAxisY(FQuat& Q);
    static FVector Quat_GetAxisX(FQuat& Q);
    static float Quat_GetAngle(FQuat& Q);
    static FQuat Quat_Exp(FQuat& Q);
    static FVector Quat_Euler(FQuat& Q);
    static void Quat_EnforceShortestArcWith(FQuat& A, FQuat& B);
    static float Quat_AngularDistance(FQuat& A, FQuat& B);
    static FVector ProjectVectorOnToVector(FVector V, FVector Target);
    static FVector ProjectVectorOnToPlane(FVector V, FVector PlaneNormal);
    static FVector ProjectPointOnToPlane(FVector Point, FVector PlaneBase, FVector PlaneNormal);
    static bool PointsAreCoplanar(TArray<FVector>& Points, float Tolerance);
    static float PerlinNoise1D(float Value);
    static int32_t Percent_IntInt(int32_t A, int32_t B);
    static float Percent_FloatFloat(float A, float B);
    static uint8_t Percent_ByteByte(uint8_t A, uint8_t B);
    static int32_t Or_IntInt(int32_t A, int32_t B);
    static int64_t Or_Int64Int64(int64_t A, int64_t B);
    static FDateTime Now();
    static bool NotEqualExactly_VectorVector(FVector A, FVector B);
    static bool NotEqualExactly_Vector4Vector4(FVector4& A, FVector4& B);
    static bool NotEqualExactly_Vector2DVector2D(FVector2D A, FVector2D B);
    static bool NotEqual_VectorVector(FVector A, FVector B, float ErrorTolerance);
    static bool NotEqual_Vector4Vector4(FVector4& A, FVector4& B, float ErrorTolerance);
    static bool NotEqual_Vector2DVector2D(FVector2D A, FVector2D B, float ErrorTolerance);
    static bool NotEqual_TimespanTimespan(FTimespan A, FTimespan B);
    static bool NotEqual_RotatorRotator(FRotator A, FRotator B, float ErrorTolerance);
    static bool NotEqual_QuatQuat(FQuat& A, FQuat& B, float ErrorTolerance);
    static bool NotEqual_ObjectObject(UObject* A, UObject* B);
    static bool NotEqual_NameName(FName A, FName B);
    static bool NotEqual_MatrixMatrix(FMatrix& A, FMatrix& B, float Tolerance);
    static bool NotEqual_LinearColorLinearColor(FLinearColor A, FLinearColor B);
    static bool NotEqual_IntPointIntPoint(FIntPoint A, FIntPoint B);
    static bool NotEqual_IntInt(int32_t A, int32_t B);
    static bool NotEqual_Int64Int64(int64_t A, int64_t B);
    static bool NotEqual_FloatFloat(float A, float B);
    static bool NotEqual_DateTimeDateTime(FDateTime A, FDateTime B);
    static bool NotEqual_ClassClass(UClass* A, UClass* B);
    static bool NotEqual_ByteByte(uint8_t A, uint8_t B);
    static bool NotEqual_BoolBool(bool A, bool B);
    static bool Not_PreBool(bool A);
    static int64_t Not_Int64(int64_t A);
    static int32_t Not_Int(int32_t A);
    static FVector2D NormalSafe2D(FVector2D A, float Tolerance);
    static float NormalizeToRange(float Value, float RangeMin, float RangeMax);
    static FRotator NormalizedDeltaRotator(FRotator A, FRotator B);
    static float NormalizeAxis(float Angle);
    static void Normalize2D(FVector2D& A, float Tolerance);
    static FVector2D Normal2D(FVector2D A);
    static FVector Normal(FVector A, float Tolerance);
    static FVector NegateVector(FVector A);
    static FRotator NegateRotator(FRotator A);
    static FVector2D Negated2D(FVector2D& A);
    static bool NearlyEqual_TransformTransform(FTransform& A, FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance);
    static bool NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance);
    static float MultiplyMultiply_FloatFloat(float Base, float Exp);
    static float MultiplyByPi(float Value);
    static FVector Multiply_VectorVector(FVector A, FVector B);
    static FVector Multiply_VectorInt(FVector A, int32_t B);
    static FVector Multiply_VectorFloat(FVector A, float B);
    static FVector4 Multiply_Vector4Vector4(FVector4& A, FVector4& B);
    static FVector2D Multiply_Vector2DVector2D(FVector2D A, FVector2D B);
    static FVector2D Multiply_Vector2DFloat(FVector2D A, float B);
    static FTimespan Multiply_TimespanFloat(FTimespan A, float Scalar);
    static FRotator Multiply_RotatorInt(FRotator A, int32_t B);
    static FRotator Multiply_RotatorFloat(FRotator A, float B);
    static FQuat Multiply_QuatQuat(FQuat& A, FQuat& B);
    static FMatrix Multiply_MatrixMatrix(FMatrix& A, FMatrix& B);
    static FMatrix Multiply_MatrixFloat(FMatrix& A, float B);
    static FLinearColor Multiply_LinearColorLinearColor(FLinearColor A, FLinearColor B);
    static FLinearColor Multiply_LinearColorFloat(FLinearColor A, float B);
    static FIntPoint Multiply_IntPointIntPoint(FIntPoint A, FIntPoint B);
    static FIntPoint Multiply_IntPointInt(FIntPoint A, int32_t B);
    static int32_t Multiply_IntInt(int32_t A, int32_t B);
    static float Multiply_IntFloat(int32_t A, float B);
    static int64_t Multiply_Int64Int64(int64_t A, int64_t B);
    static float Multiply_FloatFloat(float A, float B);
    static uint8_t Multiply_ByteByte(uint8_t A, uint8_t B);
    static FVector MirrorVectorByNormal(FVector InVect, FVector InNormal);
    static void MinOfIntArray(TArray<int32_t>& IntArray, int32_t& IndexOfMinValue, int32_t& MinValue);
    static void MinOfFloatArray(TArray<float>& FloatArray, int32_t& IndexOfMinValue, float& MinValue);
    static void MinOfByteArray(TArray<uint8_t>& ByteArray, int32_t& IndexOfMinValue, uint8_t& MinValue);
    static int64_t MinInt64(int64_t A, int64_t B);
    static void MinimumAreaRectangle(UObject* WorldContextObject, TArray<FVector>& InVerts, FVector& SampleSurfaceNormal, FVector& OutRectCenter, FRotator& OutRectRotation, float& OutSideLengthX, float& OutSideLengthY, bool bDebugDraw);
    static int32_t Min(int32_t A, int32_t B);
    static void MaxOfIntArray(TArray<int32_t>& IntArray, int32_t& IndexOfMaxValue, int32_t& MaxValue);
    static void MaxOfFloatArray(TArray<float>& FloatArray, int32_t& IndexOfMaxValue, float& MaxValue);
    static void MaxOfByteArray(TArray<uint8_t>& ByteArray, int32_t& IndexOfMaxValue, uint8_t& MaxValue);
    static int64_t MaxInt64(int64_t A, int64_t B);
    static int32_t Max(int32_t A, int32_t B);
    static FVector4 Matrix_TransformVector4(FMatrix& M, FVector4 V);
    static FVector4 Matrix_TransformVector(FMatrix& M, FVector V);
    static FVector4 Matrix_TransformPosition(FMatrix& M, FVector V);
    static FQuat Matrix_ToQuat(FMatrix& M);
    static void Matrix_SetOrigin(FMatrix& M, FVector NewOrigin);
    static void Matrix_SetColumn(FMatrix& M, EMatrixColumns::Type Column, FVector Value);
    static void Matrix_SetAxis(FMatrix& M, EAxis::Type Axis, FVector AxisVector);
    static FMatrix Matrix_ScaleTranslation(FMatrix& M, FVector Scale3D);
    static FMatrix Matrix_RemoveTranslation(FMatrix& M);
    static void Matrix_RemoveScaling(FMatrix& M, float Tolerance);
    static FMatrix Matrix_Mirror(FMatrix& M, EAxis::Type MirrorAxis, EAxis::Type FlipAxis);
    static FVector Matrix_InverseTransformVector(FMatrix& M, FVector V);
    static FVector Matrix_InverseTransformPosition(FMatrix& M, FVector V);
    static FMatrix Matrix_Identity();
    static FVector Matrix_GetUnitAxis(FMatrix& M, EAxis::Type Axis);
    static void Matrix_GetUnitAxes(FMatrix& M, FVector& X, FVector& Y, FVector& Z);
    static FMatrix Matrix_GetTransposed(FMatrix& M);
    static FMatrix Matrix_GetTransposeAdjoint(FMatrix& M);
    static FVector Matrix_GetScaleVector(FMatrix& M, float Tolerance);
    static FVector Matrix_GetScaledAxis(FMatrix& M, EAxis::Type Axis);
    static void Matrix_GetScaledAxes(FMatrix& M, FVector& X, FVector& Y, FVector& Z);
    static float Matrix_GetRotDeterminant(FMatrix& M);
    static FRotator Matrix_GetRotator(FMatrix& M);
    static FVector Matrix_GetOrigin(FMatrix& InMatrix);
    static float Matrix_GetMaximumAxisScale(FMatrix& M);
    static FMatrix Matrix_GetMatrixWithoutScale(FMatrix& M, float Tolerance);
    static FMatrix Matrix_GetInverse(FMatrix& M);
    static bool Matrix_GetFrustumTopPlane(FMatrix& M, FPlane& OutPlane);
    static bool Matrix_GetFrustumRightPlane(FMatrix& M, FPlane& OutPlane);
    static bool Matrix_GetFrustumNearPlane(FMatrix& M, FPlane& OutPlane);
    static bool Matrix_GetFrustumLeftPlane(FMatrix& M, FPlane& OutPlane);
    static bool Matrix_GetFrustumFarPlane(FMatrix& M, FPlane& OutPlane);
    static bool Matrix_GetFrustumBottomPlane(FMatrix& M, FPlane& OutPlane);
    static float Matrix_GetDeterminant(FMatrix& M);
    static FVector Matrix_GetColumn(FMatrix& M, EMatrixColumns::Type Column);
    static bool Matrix_ContainsNaN(FMatrix& M);
    static FMatrix Matrix_ConcatenateTranslation(FMatrix& M, FVector Translation);
    static FMatrix Matrix_ApplyScale(FMatrix& M, float Scale);
    static float MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);
    static float MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);
    static FVector4 MakeVector4(float X, float Y, float Z, float W);
    static FVector2D MakeVector2D(float X, float Y);
    static FVector MakeVector(float X, float Y, float Z);
    static FTransform MakeTransform(FVector Location, FRotator Rotation, FVector Scale);
    static FTimespan MakeTimespan2(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t FractionNano);
    static FTimespan MakeTimespan(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t Milliseconds);
    static FRotator MakeRotFromZY(FVector& Z, FVector& Y);
    static FRotator MakeRotFromZX(FVector& Z, FVector& X);
    static FRotator MakeRotFromZ(FVector& Z);
    static FRotator MakeRotFromYZ(FVector& Y, FVector& Z);
    static FRotator MakeRotFromYX(FVector& Y, FVector& X);
    static FRotator MakeRotFromY(FVector& Y);
    static FRotator MakeRotFromXZ(FVector& X, FVector& Z);
    static FRotator MakeRotFromXY(FVector& X, FVector& Y);
    static FRotator MakeRotFromX(FVector& X);
    static FRotator MakeRotator(float Roll, float Pitch, float Yaw);
    static FRotator MakeRotationFromAxes(FVector Forward, FVector Right, FVector Up);
    static FTransform MakeRelativeTransform(FTransform& A, FTransform& RelativeTo);
    static FRandomStream MakeRandomStream(int32_t InitialSeed);
    static FQualifiedFrameTime MakeQualifiedFrameTime(FFrameNumber Frame, FFrameRate FrameRate, float SubFrame);
    static float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase);
    static FPlane MakePlaneFromPointAndNormal(FVector Point, FVector Normal);
    static FFrameRate MakeFrameRate(int32_t Numerator, int32_t Denominator);
    static FDateTime MakeDateTime(int32_t Year, int32_t Month, int32_t Day, int32_t Hour, int32_t Minute, int32_t Second, int32_t Millisecond);
    static FLinearColor MakeColor(float R, float G, float B, float A);
    static FBox2D MakeBox2D(FVector2D Min, FVector2D Max);
    static FBox MakeBox(FVector Min, FVector Max);
    static float Loge(float A);
    static float Log(float A, float Base);
    static bool LinePlaneIntersection_OriginNormal(FVector& LineStart, FVector& LineEnd, FVector PlaneOrigin, FVector PlaneNormal, float& T, FVector& Intersection);
    static bool LinePlaneIntersection(FVector& LineStart, FVector& LineEnd, FPlane& APlane, float& T, FVector& Intersection);
    static FLinearColor LinearColorLerpUsingHSV(FLinearColor A, FLinearColor B, float Alpha);
    static FLinearColor LinearColorLerp(FLinearColor A, FLinearColor B, float Alpha);
    static FLinearColor LinearColor_Yellow();
    static FLinearColor LinearColor_White();
    static FLinearColor LinearColor_Transparent();
    static FColor LinearColor_ToRGBE(FLinearColor InLinearColor);
    static FLinearColor LinearColor_ToNewOpacity(FLinearColor InColor, float InOpacity);
    static void LinearColor_SetTemperature(FLinearColor& InOutColor, float InTemperature);
    static void LinearColor_SetRGBA(FLinearColor& InOutColor, float R, float G, float B, float A);
    static void LinearColor_SetRandomHue(FLinearColor& InOutColor);
    static void LinearColor_SetFromSRGB(FLinearColor& InOutColor, FColor& InSRGB);
    static void LinearColor_SetFromPow22(FLinearColor& InOutColor, FColor& InColor);
    static void LinearColor_SetFromHSV(FLinearColor& InOutColor, float H, float S, float V, float A);
    static void LinearColor_Set(FLinearColor& InOutColor, FLinearColor InColor);
    static FLinearColor LinearColor_Red();
    static FColor LinearColor_QuantizeRound(FLinearColor InColor);
    static FColor LinearColor_Quantize(FLinearColor InColor);
    static bool LinearColor_IsNearEqual(FLinearColor A, FLinearColor B, float Tolerance);
    static FLinearColor LinearColor_Green();
    static FLinearColor LinearColor_Gray();
    static float LinearColor_GetMin(FLinearColor InColor);
    static float LinearColor_GetMax(FLinearColor InColor);
    static float LinearColor_GetLuminance(FLinearColor InColor);
    static float LinearColor_Distance(FLinearColor C1, FLinearColor C2);
    static FLinearColor LinearColor_Desaturated(FLinearColor InColor, float InDesaturation);
    static FLinearColor LinearColor_Blue();
    static FLinearColor LinearColor_Black();
    static FVector LessLess_VectorRotator(FVector A, FRotator B);
    static bool LessEqual_TimespanTimespan(FTimespan A, FTimespan B);
    static bool LessEqual_IntInt(int32_t A, int32_t B);
    static bool LessEqual_Int64Int64(int64_t A, int64_t B);
    static bool LessEqual_FloatFloat(float A, float B);
    static bool LessEqual_DateTimeDateTime(FDateTime A, FDateTime B);
    static bool LessEqual_ByteByte(uint8_t A, uint8_t B);
    static bool Less_TimespanTimespan(FTimespan A, FTimespan B);
    static bool Less_IntInt(int32_t A, int32_t B);
    static bool Less_Int64Int64(int64_t A, int64_t B);
    static bool Less_FloatFloat(float A, float B);
    static bool Less_DateTimeDateTime(FDateTime A, FDateTime B);
    static bool Less_ByteByte(uint8_t A, uint8_t B);
    static float Lerp(float A, float B, float Alpha);
    static bool IsZero2D(FVector2D& A);
    static bool IsPointInBoxWithTransform(FVector Point, FTransform& BoxWorldTransform, FVector BoxExtent);
    static bool IsPointInBox(FVector Point, FVector BoxOrigin, FVector BoxExtent);
    static bool IsNearlyZero2D(FVector2D& A, float Tolerance);
    static bool IsMorning(FDateTime A);
    static bool IsLeapYear(int32_t Year);
    static bool IsAfternoon(FDateTime A);
    static FTransform InvertTransform(FTransform& T);
    static FRotator InverseTransformRotation(FTransform& T, FRotator Rotation);
    static FVector InverseTransformLocation(FTransform& T, FVector Location);
    static FVector InverseTransformDirection(FTransform& T, FVector Direction);
    static FIntPoint IntPoint_Zero();
    static FIntPoint IntPoint_Up();
    static FIntPoint IntPoint_Right();
    static FIntPoint IntPoint_One();
    static FIntPoint IntPoint_Left();
    static FIntPoint IntPoint_Down();
    static bool InRange_IntInt(int32_t Value, int32_t Min, int32_t Max, bool InclusiveMin, bool InclusiveMax);
    static bool InRange_Int64Int64(int64_t Value, int64_t Min, int64_t Max, bool InclusiveMin, bool InclusiveMax);
    static bool InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax);
    static float Hypotenuse(float Width, float Height);
    static FLinearColor HSVToRGBLinear(FLinearColor HSV);
    static void HSVToRGB_Vector(FLinearColor HSV, FLinearColor& RGB);
    static FLinearColor HSVToRGB(float H, float S, float V, float A);
    static float GridSnap_Float(float Location, float GridSize);
    static FVector GreaterGreater_VectorRotator(FVector A, FRotator B);
    static bool GreaterEqual_TimespanTimespan(FTimespan A, FTimespan B);
    static bool GreaterEqual_IntInt(int32_t A, int32_t B);
    static bool GreaterEqual_Int64Int64(int64_t A, int64_t B);
    static bool GreaterEqual_FloatFloat(float A, float B);
    static bool GreaterEqual_DateTimeDateTime(FDateTime A, FDateTime B);
    static bool GreaterEqual_ByteByte(uint8_t A, uint8_t B);
    static bool Greater_TimespanTimespan(FTimespan A, FTimespan B);
    static bool Greater_IntInt(int32_t A, int32_t B);
    static bool Greater_Int64Int64(int64_t A, int64_t B);
    static bool Greater_FloatFloat(float A, float B);
    static bool Greater_DateTimeDateTime(FDateTime A, FDateTime B);
    static bool Greater_ByteByte(uint8_t A, uint8_t B);
    static int32_t GetYear(FDateTime A);
    static void GetYawPitchFromVector(FVector InVec, float& Yaw, float& Pitch);
    static FVector GetVectorArrayAverage(TArray<FVector>& Vectors);
    static FVector GetUpVector(FRotator InRot);
    static float GetTotalSeconds(FTimespan A);
    static float GetTotalMinutes(FTimespan A);
    static float GetTotalMilliseconds(FTimespan A);
    static float GetTotalHours(FTimespan A);
    static float GetTotalDays(FTimespan A);
    static FTimespan GetTimeOfDay(FDateTime A);
    static float GetTAU();
    static void GetSlopeDegreeAngles(FVector& MyRightYAxis, FVector& FloorNormal, FVector& UpVector, float& OutSlopePitchDegreeAngle, float& OutSlopeRollDegreeAngle);
    static int32_t GetSeconds(FTimespan A);
    static int32_t GetSecond(FDateTime A);
    static FVector2D GetRotated2D(FVector2D A, float AngleDeg);
    static FVector GetRightVector(FRotator InRot);
    static FVector GetReflectionVector(FVector Direction, FVector SurfaceNormal);
    static float GetPointDistanceToSegment(FVector Point, FVector SegmentStart, FVector SegmentEnd);
    static float GetPointDistanceToLine(FVector Point, FVector LineOrigin, FVector LineDirection);
    static float GetPI();
    static int32_t GetMonth(FDateTime A);
    static int32_t GetMinutes(FTimespan A);
    static int32_t GetMinute(FDateTime A);
    static float GetMinElement(FVector A);
    static float GetMin2D(FVector2D A);
    static int32_t GetMilliseconds(FTimespan A);
    static int32_t GetMillisecond(FDateTime A);
    static float GetMaxElement(FVector A);
    static float GetMax2D(FVector2D A);
    static int32_t GetHours(FTimespan A);
    static int32_t GetHour12(FDateTime A);
    static int32_t GetHour(FDateTime A);
    static FVector GetForwardVector(FRotator InRot);
    static FTimespan GetDuration(FTimespan A);
    static FVector GetDirectionUnitVector(FVector From, FVector To);
    static int32_t GetDays(FTimespan A);
    static int32_t GetDayOfYear(FDateTime A);
    static int32_t GetDay(FDateTime A);
    static FDateTime GetDate(FDateTime A);
    static void GetAzimuthAndElevation(FVector InDirection, FTransform& ReferenceFrame, float& Azimuth, float& Elevation);
    static void GetAxes(FRotator A, FVector& X, FVector& Y, FVector& Z);
    static float GetAbsMax2D(FVector2D A);
    static FVector2D GetAbs2D(FVector2D A);
    static float FWrap(float Value, float Min, float Max);
    static FIntVector FTruncVector(FVector& InVector);
    static int64_t FTrunc64(float A);
    static int32_t FTrunc(float A);
    static FTimespan FromSeconds(float Seconds);
    static FTimespan FromMinutes(float Minutes);
    static FTimespan FromMilliseconds(float Milliseconds);
    static FTimespan FromHours(float Hours);
    static FTimespan FromDays(float Days);
    static float Fraction(float A);
    static int32_t FMod(float Dividend, float Divisor, float& Remainder);
    static float FMin(float A, float B);
    static float FMax(float A, float B);
    static float FloatSpringInterp(float Current, float Target, FFloatSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);
    static float FixedTurn(float InCurrent, float InDesired, float InDeltaRate);
    static float FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed);
    static float FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed);
    static float FInterpEaseInOut(float A, float B, float Alpha, float Exponent);
    static void FindNearestPointsOnLineSegments(FVector Segment1Start, FVector Segment1End, FVector Segment2Start, FVector Segment2End, FVector& Segment1Point, FVector& Segment2Point);
    static FRotator FindLookAtRotation(FVector& Start, FVector& Target);
    static FVector FindClosestPointOnSegment(FVector Point, FVector SegmentStart, FVector SegmentEnd);
    static FVector FindClosestPointOnLine(FVector Point, FVector LineOrigin, FVector LineDirection);
    static int64_t FFloor64(float A);
    static int32_t FFloor(float A);
    static float FClamp(float Value, float Min, float Max);
    static int64_t FCeil64(float A);
    static int32_t FCeil(float A);
    static float Exp(float A);
    static bool EqualExactly_VectorVector(FVector A, FVector B);
    static bool EqualExactly_Vector4Vector4(FVector4& A, FVector4& B);
    static bool EqualExactly_Vector2DVector2D(FVector2D A, FVector2D B);
    static bool EqualEqual_VectorVector(FVector A, FVector B, float ErrorTolerance);
    static bool EqualEqual_Vector4Vector4(FVector4& A, FVector4& B, float ErrorTolerance);
    static bool EqualEqual_Vector2DVector2D(FVector2D A, FVector2D B, float ErrorTolerance);
    static bool EqualEqual_TransformTransform(FTransform& A, FTransform& B);
    static bool EqualEqual_TimespanTimespan(FTimespan A, FTimespan B);
    static bool EqualEqual_RotatorRotator(FRotator A, FRotator B, float ErrorTolerance);
    static bool EqualEqual_QuatQuat(FQuat& A, FQuat& B, float Tolerance);
    static bool EqualEqual_ObjectObject(UObject* A, UObject* B);
    static bool EqualEqual_NameName(FName A, FName B);
    static bool EqualEqual_MatrixMatrix(FMatrix& A, FMatrix& B, float Tolerance);
    static bool EqualEqual_LinearColorLinearColor(FLinearColor A, FLinearColor B);
    static bool EqualEqual_IntInt(int32_t A, int32_t B);
    static bool EqualEqual_Int64Int64(int64_t A, int64_t B);
    static bool EqualEqual_FloatFloat(float A, float B);
    static bool EqualEqual_DateTimeDateTime(FDateTime A, FDateTime B);
    static bool EqualEqual_ClassClass(UClass* A, UClass* B);
    static bool EqualEqual_ByteByte(uint8_t A, uint8_t B);
    static bool EqualEqual_BoolBool(bool A, bool B);
    static bool Equal_IntPointIntPoint(FIntPoint A, FIntPoint B);
    static float Ease(float A, float B, float Alpha, EEasingFunc::Type EasingFunc, float BlendExp, int32_t Steps);
    static FVector DynamicWeightedMovingAverage_FVector(FVector CurrentSample, FVector PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);
    static FRotator DynamicWeightedMovingAverage_FRotator(FRotator CurrentSample, FRotator PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);
    static float DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);
    static float DotProduct2D(FVector2D A, FVector2D B);
    static float Dot_VectorVector(FVector A, FVector B);
    static FVector Divide_VectorVector(FVector A, FVector B);
    static FVector Divide_VectorInt(FVector A, int32_t B);
    static FVector Divide_VectorFloat(FVector A, float B);
    static FVector4 Divide_Vector4Vector4(FVector4& A, FVector4& B);
    static FVector2D Divide_Vector2DVector2D(FVector2D A, FVector2D B);
    static FVector2D Divide_Vector2DFloat(FVector2D A, float B);
    static FTimespan Divide_TimespanFloat(FTimespan A, float Scalar);
    static FLinearColor Divide_LinearColorLinearColor(FLinearColor A, FLinearColor B);
    static FIntPoint Divide_IntPointIntPoint(FIntPoint A, FIntPoint B);
    static FIntPoint Divide_IntPointInt(FIntPoint A, int32_t B);
    static int32_t Divide_IntInt(int32_t A, int32_t B);
    static int64_t Divide_Int64Int64(int64_t A, int64_t B);
    static float Divide_FloatFloat(float A, float B);
    static uint8_t Divide_ByteByte(uint8_t A, uint8_t B);
    static float DistanceSquared2D(FVector2D v1, FVector2D v2);
    static float Distance2D(FVector2D v1, FVector2D v2);
    static float DegTan(float A);
    static float DegSin(float A);
    static float DegreesToRadians(float A);
    static float DegCos(float A);
    static float DegAtan2(float Y, float X);
    static float DegAtan(float A);
    static float DegAsin(float A);
    static float DegAcos(float A);
    static int32_t DaysInYear(int32_t Year);
    static int32_t DaysInMonth(int32_t Year, int32_t Month);
    static FDateTime DateTimeMinValue();
    static FDateTime DateTimeMaxValue();
    static bool DateTimeFromString(FString DateTimeString, FDateTime& Result);
    static bool DateTimeFromIsoString(FString IsoString, FDateTime& Result);
    static float CrossProduct2D(FVector2D A, FVector2D B);
    static FVector Cross_VectorVector(FVector A, FVector B);
    static FVector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length);
    static float Cos(float A);
    static FTransform ConvertTransformToRelative(FTransform& Transform, FTransform& ParentTransform);
    static FVector2D Conv_VectorToVector2D(FVector InVector);
    static FTransform Conv_VectorToTransform(FVector InLocation);
    static FRotator Conv_VectorToRotator(FVector InVec);
    static FQuat Conv_VectorToQuaternion(FVector InVec);
    static FLinearColor Conv_VectorToLinearColor(FVector InVec);
    static FVector Conv_Vector4ToVector(FVector4& InVector4);
    static FRotator Conv_Vector4ToRotator(FVector4& InVec);
    static FQuat Conv_Vector4ToQuaternion(FVector4& InVec);
    static FVector Conv_Vector2DToVector(FVector2D InVector2D, float Z);
    static FIntPoint Conv_Vector2DToIntPoint(FVector2D InVector2D);
    static FMatrix Conv_TransformToMatrix(FTransform& Transform);
    static FVector Conv_RotatorToVector(FRotator InRot);
    static FTransform Conv_RotatorToTransform(FRotator& InRotator);
    static FTransform Conv_MatrixToTransform(FMatrix& InMatrix);
    static FRotator Conv_MatrixToRotator(FMatrix& InMatrix);
    static FVector Conv_LinearColorToVector(FLinearColor InLinearColor);
    static FColor Conv_LinearColorToColor(FLinearColor InLinearColor, bool InUseSRGB);
    static FVector Conv_IntVectorToVector(FIntVector& InIntVector);
    static FIntVector Conv_IntToIntVector(int32_t inInt);
    static int64_t Conv_IntToInt64(int32_t inInt);
    static float Conv_IntToFloat(int32_t inInt);
    static uint8_t Conv_IntToByte(int32_t inInt);
    static bool Conv_IntToBool(int32_t inInt);
    static FVector2D Conv_IntPointToVector2D(FIntPoint InIntPoint);
    static int32_t Conv_Int64ToInt(int64_t inInt);
    static uint8_t Conv_Int64ToByte(int64_t inInt);
    static FVector Conv_FloatToVector(float InFloat);
    static FLinearColor Conv_FloatToLinearColor(float InFloat);
    static FLinearColor Conv_ColorToLinearColor(FColor InColor);
    static int32_t Conv_ByteToInt(uint8_t InByte);
    static float Conv_ByteToFloat(uint8_t InByte);
    static int32_t Conv_BoolToInt(bool InBool);
    static float Conv_BoolToFloat(bool InBool);
    static uint8_t Conv_BoolToByte(bool InBool);
    static FTransform ComposeTransforms(FTransform& A, FTransform& B);
    static FRotator ComposeRotators(FRotator A, FRotator B);
    static bool ClassIsChildOf(UClass* TestClass, UClass* ParentClass);
    static FVector ClampVectorSize(FVector A, float Min, float Max);
    static int64_t ClampInt64(int64_t Value, int64_t Min, int64_t Max);
    static float ClampAxis(float Angle);
    static FVector2D ClampAxes2D(FVector2D A, float MinAxisVal, float MaxAxisVal);
    static float ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees);
    static int32_t Clamp(int32_t Value, int32_t Min, int32_t Max);
    static FLinearColor CInterpTo(FLinearColor Current, FLinearColor Target, float DeltaTime, float InterpSpeed);
    static void BreakVector4(FVector4& InVec, float& X, float& Y, float& Z, float& W);
    static void BreakVector2D(FVector2D InVec, float& X, float& Y);
    static void BreakVector(FVector InVec, float& X, float& Y, float& Z);
    static void BreakTransform(FTransform& InTransform, FVector& Location, FRotator& Rotation, FVector& Scale);
    static void BreakTimespan2(FTimespan InTimespan, int32_t& Days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& FractionNano);
    static void BreakTimespan(FTimespan InTimespan, int32_t& Days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& Milliseconds);
    static void BreakRotIntoAxes(FRotator& InRot, FVector& X, FVector& Y, FVector& Z);
    static void BreakRotator(FRotator InRot, float& Roll, float& Pitch, float& Yaw);
    static void BreakRandomStream(FRandomStream& InRandomStream, int32_t& InitialSeed);
    static void BreakQualifiedFrameTime(FQualifiedFrameTime& InFrameTime, FFrameNumber& Frame, FFrameRate& FrameRate, float& SubFrame);
    static void BreakFrameRate(FFrameRate& InFrameRate, int32_t& Numerator, int32_t& Denominator);
    static void BreakDateTime(FDateTime InDateTime, int32_t& Year, int32_t& Month, int32_t& Day, int32_t& Hour, int32_t& Minute, int32_t& Second, int32_t& Millisecond);
    static void BreakColor(FLinearColor InColor, float& R, float& G, float& B, float& A);
    static bool BooleanXOR(bool A, bool B);
    static bool BooleanOR(bool A, bool B);
    static bool BooleanNOR(bool A, bool B);
    static bool BooleanNAND(bool A, bool B);
    static bool BooleanAND(bool A, bool B);
    static uint8_t BMin(uint8_t A, uint8_t B);
    static uint8_t BMax(uint8_t A, uint8_t B);
    static float Atan2(float Y, float X);
    static float Atan(float A);
    static float Asin(float A);
    static int32_t And_IntInt(int32_t A, int32_t B);
    static int64_t And_Int64Int64(int64_t A, int64_t B);
    static FVector Add_VectorVector(FVector A, FVector B);
    static FVector Add_VectorInt(FVector A, int32_t B);
    static FVector Add_VectorFloat(FVector A, float B);
    static FVector4 Add_Vector4Vector4(FVector4& A, FVector4& B);
    static FVector2D Add_Vector2DVector2D(FVector2D A, FVector2D B);
    static FVector2D Add_Vector2DFloat(FVector2D A, float B);
    static FTimespan Add_TimespanTimespan(FTimespan A, FTimespan B);
    static FQuat Add_QuatQuat(FQuat& A, FQuat& B);
    static FMatrix Add_MatrixMatrix(FMatrix& A, FMatrix& B);
    static FLinearColor Add_LinearColorLinearColor(FLinearColor A, FLinearColor B);
    static FIntPoint Add_IntPointIntPoint(FIntPoint A, FIntPoint B);
    static FIntPoint Add_IntPointInt(FIntPoint A, int32_t B);
    static int32_t Add_IntInt(int32_t A, int32_t B);
    static int64_t Add_Int64Int64(int64_t A, int64_t B);
    static float Add_FloatFloat(float A, float B);
    static FDateTime Add_DateTimeTimespan(FDateTime A, FTimespan B);
    static FDateTime Add_DateTimeDateTime(FDateTime A, FDateTime B);
    static uint8_t Add_ByteByte(uint8_t A, uint8_t B);
    static float Acos(float A);
    static int64_t Abs_Int64(int64_t A);
    static int32_t Abs_Int(int32_t A);
    static float Abs(float A);
}; // Size: 0x28
#pragma pack(pop)
